
C:\Users\spam\AppData\Local\Temp\arduino\sketches\BA2AD60CBEFFD09A8A65E4BAD78FFEF1/XT_KEYBOARD.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	cb c0       	rjmp	.+406    	; 0x198 <__ctors_end>
       2:	3c c6       	rjmp	.+3192   	; 0xc7c <__vector_1>
       4:	ee c0       	rjmp	.+476    	; 0x1e2 <__bad_interrupt>
       6:	ed c0       	rjmp	.+474    	; 0x1e2 <__bad_interrupt>
       8:	db c6       	rjmp	.+3510   	; 0xdc0 <__vector_4>
       a:	b5 c6       	rjmp	.+3434   	; 0xd76 <__vector_5>
       c:	ea c0       	rjmp	.+468    	; 0x1e2 <__bad_interrupt>
       e:	63 c6       	rjmp	.+3270   	; 0xcd6 <__vector_7>
      10:	e8 c0       	rjmp	.+464    	; 0x1e2 <__bad_interrupt>
      12:	e7 c0       	rjmp	.+462    	; 0x1e2 <__bad_interrupt>
      14:	e6 c0       	rjmp	.+460    	; 0x1e2 <__bad_interrupt>
      16:	e5 c0       	rjmp	.+458    	; 0x1e2 <__bad_interrupt>
      18:	e4 c0       	rjmp	.+456    	; 0x1e2 <__bad_interrupt>
      1a:	e3 c0       	rjmp	.+454    	; 0x1e2 <__bad_interrupt>
      1c:	e2 c0       	rjmp	.+452    	; 0x1e2 <__bad_interrupt>

0000001e <__trampolines_end>:
__trampolines_start():
      1e:	30 31       	cpi	r19, 0x10	; 16
      20:	32 33       	cpi	r19, 0x32	; 50
      22:	34 35       	cpi	r19, 0x54	; 84
      24:	36 37       	cpi	r19, 0x76	; 118
      26:	38 39       	cpi	r19, 0x98	; 152
      28:	41 42       	sbci	r20, 0x21	; 33
      2a:	43 44       	sbci	r20, 0x43	; 67
      2c:	45 46       	sbci	r20, 0x65	; 101
	...

0000002f <Print::printNumber(unsigned long, unsigned char)::base16>:
      2f:	00 00 00 10 00 00 00 01 00 00 10 00 00 00 01 00     ................
      3f:	00 10 00 00 00 01 00 00 10 00 00 00 01 00 00 00     ................
      4f:	00 00 00 00                                         ....

00000053 <scroll_remap>:
      53:	19 12 18 14 15 bb 16 11 17 13 1a                    ...........

0000005e <control_flags>:
      5e:	40 40 20 20 08 04 02 02                             @@  ....

00000066 <single_key>:
      66:	77 01 7e 02 58 03 12 06 59 07 14 08 11 0a 84 10     w.~.X...Y.......
      76:	76 1b 66 1c 0d 1d 5a 1e 29 1f 70 20 69 21 72 22     v.f...Z.).p i!r"
      86:	7a 23 6b 24 73 25 74 26 6c 27 75 28 7d 29 71 2a     z#k$s%t&l'u(})q*
      96:	79 2c 7b 2d 7c 2e 0f 3f 45 30 16 31 1e 32 26 33     y,{-|..?E0.1.2&3
      a6:	25 34 2e 35 36 36 3d 37 3e 38 46 39 52 3a 41 3b     %4.566=7>8F9R:A;
      b6:	4e 3c 49 3d 4a 3e 0e 40 1c 41 32 42 21 43 23 44     N<I=J>.@.A2B!C#D
      c6:	24 45 2b 46 34 47 33 48 43 49 3b 4a 42 4b 4b 4c     $E+F4G3HCI;JBKKL
      d6:	3a 4d 31 4e 44 4f 4d 50 15 51 2d 52 1b 53 2c 54     :M1NDOMP.Q-R.S,T
      e6:	3c 55 2a 56 1d 57 22 58 35 59 1a 5a 4c 5b 5d 5c     <U*V.W"X5Y.ZL[]\
      f6:	54 5d 5b 5e 55 5f 61 8b 05 61 06 62 04 63 0c 64     T][^U_a..a.b.c.d
     106:	03 65 0b 66 83 67 0a 68 01 69 09 6a 78 6b 07 6c     .e.f.g.h.i.jxk.l
     116:	08 6d 10 6e 18 6f 20 70 28 71 30 72 38 73 40 74     .m.n.o p(q0r8s@t
     126:	48 75 50 76 57 77 5f 78 6d 60 51 91 13 92 6a 93     HuPvWw_xm`Q...j.
     136:	64 94 67 95 f2 96 f1 97 63 98 62 99 5f a0           d.g.....c.b._.

00000144 <extended_key>:
     144:	12 bb 7c 04 14 09 11 0b 1f 0c 27 0d 2f 0e 7e 0f     ..|.......'./.~.
     154:	6c 11 69 12 7d 13 7a 14 6b 15 74 16 75 17 72 18     l.i.}.z.k.t.u.r.
     164:	70 19 71 1a 5a 2b 4a 2f 4d 79 15 7a 3b 7b 34 7c     p.q.Z+J/My.z;{4|
     174:	23 7d 32 7e 21 7f 50 80 48 81 2b 82 40 83 10 84     #}2~!.P.H.+.@...
     184:	3a 85 38 86 30 87 28 88 20 89 18 8a 37 8c 3f 8d     :.8.0.(. ...7.?.
     194:	5e 90                                               ^.

00000196 <__ctors_start>:
__ctors_start():
     196:	3c 07       	cpc	r19, r28

00000198 <__ctors_end>:
__dtors_end():
     198:	11 24       	eor	r1, r1
     19a:	1f be       	out	0x3f, r1	; 63
     19c:	cf e5       	ldi	r28, 0x5F	; 95
     19e:	d2 e0       	ldi	r29, 0x02	; 2
     1a0:	de bf       	out	0x3e, r29	; 62
     1a2:	cd bf       	out	0x3d, r28	; 61

000001a4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1a4:	21 e0       	ldi	r18, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1a6:	a2 e7       	ldi	r26, 0x72	; 114
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1aa:	01 c0       	rjmp	.+2      	; 0x1ae <.do_clear_bss_start>

000001ac <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1ac:	1d 92       	st	X+, r1

000001ae <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1ae:	a5 37       	cpi	r26, 0x75	; 117
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1b0:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1b2:	e1 f7       	brne	.-8      	; 0x1ac <.do_clear_bss_loop>

000001b4 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
     1b4:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
     1b6:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
     1ba:	ea e4       	ldi	r30, 0x4A	; 74
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
     1bc:	f3 e1       	ldi	r31, 0x13	; 19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
     1be:	02 c0       	rjmp	.+4      	; 0x1c4 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
     1c0:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
     1c2:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
     1c4:	a2 37       	cpi	r26, 0x72	; 114
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
     1c6:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
     1c8:	d9 f7       	brne	.-10     	; 0x1c0 <__do_copy_data+0xc>

000001ca <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1ca:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1cc:	cc ec       	ldi	r28, 0xCC	; 204
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1ce:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1d0:	03 c0       	rjmp	.+6      	; 0x1d8 <__do_global_ctors+0xe>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1d2:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1d4:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1d6:	b1 d8       	rcall	.-3742   	; 0xfffff33a <__eeprom_end+0xff7ef33a>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1d8:	cb 3c       	cpi	r28, 0xCB	; 203
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1da:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1dc:	d1 f7       	brne	.-12     	; 0x1d2 <__do_global_ctors+0x8>
     1de:	68 d6       	rcall	.+3280   	; 0xeb0 <main>
     1e0:	b2 c8       	rjmp	.-3740   	; 0xfffff346 <__eeprom_end+0xff7ef346>

000001e2 <__bad_interrupt>:
__vector_12():
     1e2:	0e cf       	rjmp	.-484    	; 0x0 <__vectors>

000001e4 <attachInterrupt.part.0.constprop.12>:
attachInterrupt.part.0.constprop.12():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:60
      is not safe.  Changing intFunc is not atomic.
    intFunc[interruptNum] = userFunc;
    */
    {
      // save interrupt flag
      uint8_t SaveSREG = SREG;
     1e4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:62
      // disable interrupts
      cli();
     1e6:	f8 94       	cli
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:64
      // access the shared data
      intFunc[interruptNum] = userFunc;
     1e8:	2b e0       	ldi	r18, 0x0B	; 11
     1ea:	34 e0       	ldi	r19, 0x04	; 4
     1ec:	30 93 3e 01 	sts	0x013E, r19	; 0x80013e <intFunc+0x1>
     1f0:	20 93 3d 01 	sts	0x013D, r18	; 0x80013d <intFunc>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:66
      // restore the interrupt flag
      SREG = SaveSREG;
     1f4:	8f bf       	out	0x3f, r24	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:80

    switch ( interruptNum )
    {
      #if NUMBER_EXTERNAL_INTERRUPTS >= 1
        case EXTERNAL_INTERRUPT_0:
          EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
     1f6:	85 b7       	in	r24, 0x35	; 53
     1f8:	8c 7f       	andi	r24, 0xFC	; 252
     1fa:	82 60       	ori	r24, 0x02	; 2
     1fc:	85 bf       	out	0x35, r24	; 53
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:81
          EIMSK |= (1 << INT0);
     1fe:	8b b7       	in	r24, 0x3b	; 59
     200:	80 64       	ori	r24, 0x40	; 64
     202:	8b bf       	out	0x3b, r24	; 59
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:105
      #if NUMBER_EXTERNAL_INTERRUPTS > 2
      #error Add handlers for the additional interrupts.
      #endif
    }
  }
}
     204:	08 95       	ret

00000206 <_pinMode>:
_pinMode():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:34
#include "wiring_private.h"
#include "pins_arduino.h"

void _pinMode(uint8_t pin, uint8_t mode)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     206:	87 ff       	sbrs	r24, 7
     208:	0a c0       	rjmp	.+20     	; 0x21e <_pinMode+0x18>
     20a:	8f 77       	andi	r24, 0x7F	; 127
     20c:	83 30       	cpi	r24, 0x03	; 3
     20e:	d1 f0       	breq	.+52     	; 0x244 <_pinMode+0x3e>
     210:	81 30       	cpi	r24, 0x01	; 1
     212:	d1 f0       	breq	.+52     	; 0x248 <_pinMode+0x42>
     214:	82 30       	cpi	r24, 0x02	; 2
     216:	d1 f0       	breq	.+52     	; 0x24c <_pinMode+0x46>
     218:	88 23       	and	r24, r24
     21a:	d1 f0       	breq	.+52     	; 0x250 <_pinMode+0x4a>
     21c:	8f ef       	ldi	r24, 0xFF	; 255
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:36
  uint8_t port = digitalPinToPort(pin);
  pin = digitalPinToBitMask(pin);
     21e:	21 e0       	ldi	r18, 0x01	; 1
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	a9 01       	movw	r20, r18
     224:	02 c0       	rjmp	.+4      	; 0x22a <_pinMode+0x24>
     226:	44 0f       	add	r20, r20
     228:	55 1f       	adc	r21, r21
     22a:	8a 95       	dec	r24
     22c:	e2 f7       	brpl	.-8      	; 0x226 <_pinMode+0x20>
     22e:	ca 01       	movw	r24, r20
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:76
  // for Tiny processors.
  //
  // The reasoning for disabling them at all is here:
  //   https://github.com/arduino/Arduino/issues/146
  // in short, yes it's necessary.
  uint8_t oldSREG = SREG;
     230:	2f b7       	in	r18, 0x3f	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:77
  cli();
     232:	f8 94       	cli
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:78
  switch(mode)
     234:	66 23       	and	r22, r22
     236:	71 f0       	breq	.+28     	; 0x254 <_pinMode+0x4e>
     238:	62 30       	cpi	r22, 0x02	; 2
     23a:	a9 f0       	breq	.+42     	; 0x266 <__stack+0x7>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:92
      *out |= pin;  // Enable pullup
      break;
      
    case OUTPUT:
    default    :
      *reg |= pin;  // Set to output
     23c:	97 b3       	in	r25, 0x17	; 23
     23e:	89 2b       	or	r24, r25
     240:	87 bb       	out	0x17, r24	; 23
     242:	0f c0       	rjmp	.+30     	; 0x262 <__stack+0x3>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:34
#include "wiring_private.h"
#include "pins_arduino.h"

void _pinMode(uint8_t pin, uint8_t mode)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     244:	83 e0       	ldi	r24, 0x03	; 3
     246:	eb cf       	rjmp	.-42     	; 0x21e <_pinMode+0x18>
     248:	82 e0       	ldi	r24, 0x02	; 2
     24a:	e9 cf       	rjmp	.-46     	; 0x21e <_pinMode+0x18>
     24c:	84 e0       	ldi	r24, 0x04	; 4
     24e:	e7 cf       	rjmp	.-50     	; 0x21e <_pinMode+0x18>
     250:	85 e0       	ldi	r24, 0x05	; 5
     252:	e5 cf       	rjmp	.-54     	; 0x21e <_pinMode+0x18>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:81
  uint8_t oldSREG = SREG;
  cli();
  switch(mode)
  {
    case INPUT:
      *reg &= ~pin; // Set to input
     254:	97 b3       	in	r25, 0x17	; 23
     256:	80 95       	com	r24
     258:	98 23       	and	r25, r24
     25a:	97 bb       	out	0x17, r25	; 23
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:82
      *out &= ~pin; // Disable pullup
     25c:	98 b3       	in	r25, 0x18	; 24
     25e:	89 23       	and	r24, r25
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:87
      break;
      
    case INPUT_PULLUP:
      *reg &= ~pin; // Set to input
      *out |= pin;  // Enable pullup
     260:	88 bb       	out	0x18, r24	; 24
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:95
    case OUTPUT:
    default    :
      *reg |= pin;  // Set to output
      break;
  }
  SREG = oldSREG;
     262:	2f bf       	out	0x3f, r18	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:97
#endif
}
     264:	08 95       	ret
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:86
      *reg &= ~pin; // Set to input
      *out &= ~pin; // Disable pullup
      break;
      
    case INPUT_PULLUP:
      *reg &= ~pin; // Set to input
     266:	37 b3       	in	r19, 0x17	; 23
     268:	94 2f       	mov	r25, r20
     26a:	90 95       	com	r25
     26c:	93 23       	and	r25, r19
     26e:	97 bb       	out	0x17, r25	; 23
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:87
      *out |= pin;  // Enable pullup
     270:	98 b3       	in	r25, 0x18	; 24
     272:	89 2b       	or	r24, r25
     274:	f5 cf       	rjmp	.-22     	; 0x260 <__stack+0x1>

00000276 <TinySoftwareSerial::flush()>:
_ZN18TinySoftwareSerial5flushEv():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:242
}

void TinySoftwareSerial::flush()
{

}
     276:	08 95       	ret

00000278 <TinySoftwareSerial::write(unsigned char)>:
_ZN18TinySoftwareSerial5writeEh():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:202
  }
}

size_t TinySoftwareSerial::write(uint8_t ch)
{
  uint8_t oldSREG = SREG;
     278:	2f b7       	in	r18, 0x3f	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:203
  cli(); //Prevent interrupts from breaking the transmission. Note: TinySoftwareSerial is half duplex.
     27a:	f8 94       	cli
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:234
      [uartMask] "r" (_txmask),
      [uartUnmask] "r" (_txunmask)
    : "r23",
      "r24",
      "r25"
  );
     27c:	fc 01       	movw	r30, r24
     27e:	45 85       	ldd	r20, Z+13	; 0x0d
     280:	56 85       	ldd	r21, Z+14	; 0x0e
     282:	3a e0       	ldi	r19, 0x0A	; 10
     284:	60 95       	com	r22
     286:	08 94       	sec
     288:	20 f4       	brcc	.+8      	; 0x292 <TinySoftwareSerial::write(unsigned char)+0x1a>
     28a:	78 b3       	in	r23, 0x18	; 24
     28c:	75 23       	and	r23, r21
     28e:	78 bb       	out	0x18, r23	; 24
     290:	04 c0       	rjmp	.+8      	; 0x29a <TinySoftwareSerial::write(unsigned char)+0x22>
     292:	78 b3       	in	r23, 0x18	; 24
     294:	74 2b       	or	r23, r20
     296:	78 bb       	out	0x18, r23	; 24
     298:	00 00       	nop
     29a:	67 d5       	rcall	.+2766   	; 0xd6a <uartDelay>
     29c:	66 d5       	rcall	.+2764   	; 0xd6a <uartDelay>
     29e:	65 d5       	rcall	.+2762   	; 0xd6a <uartDelay>
     2a0:	64 d5       	rcall	.+2760   	; 0xd6a <uartDelay>
     2a2:	66 95       	lsr	r22
     2a4:	3a 95       	dec	r19
     2a6:	81 f7       	brne	.-32     	; 0x288 <TinySoftwareSerial::write(unsigned char)+0x10>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:235
  SREG = oldSREG;
     2a8:	2f bf       	out	0x3f, r18	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:237
  return 1;
}
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	08 95       	ret

000002b0 <TinySoftwareSerial::read()>:
_ZN18TinySoftwareSerial4readEv():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:191
}

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     2b0:	dc 01       	movw	r26, r24
     2b2:	1f 96       	adiw	r26, 0x0f	; 15
     2b4:	ed 91       	ld	r30, X+
     2b6:	fc 91       	ld	r31, X
     2b8:	20 a1       	ldd	r18, Z+32	; 0x20
     2ba:	31 a1       	ldd	r19, Z+33	; 0x21
     2bc:	82 a1       	ldd	r24, Z+34	; 0x22
     2be:	93 a1       	ldd	r25, Z+35	; 0x23
     2c0:	28 17       	cp	r18, r24
     2c2:	39 07       	cpc	r19, r25
     2c4:	79 f0       	breq	.+30     	; 0x2e4 <TinySoftwareSerial::read()+0x34>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:194
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     2c6:	a2 a1       	ldd	r26, Z+34	; 0x22
     2c8:	b3 a1       	ldd	r27, Z+35	; 0x23
     2ca:	ae 0f       	add	r26, r30
     2cc:	bf 1f       	adc	r27, r31
     2ce:	8c 91       	ld	r24, X
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:195
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     2d0:	22 a1       	ldd	r18, Z+34	; 0x22
     2d2:	33 a1       	ldd	r19, Z+35	; 0x23
     2d4:	2f 5f       	subi	r18, 0xFF	; 255
     2d6:	3f 4f       	sbci	r19, 0xFF	; 255
     2d8:	2f 71       	andi	r18, 0x1F	; 31
     2da:	33 27       	eor	r19, r19
     2dc:	33 a3       	std	Z+35, r19	; 0x23
     2de:	22 a3       	std	Z+34, r18	; 0x22
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:196
    return c;
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	08 95       	ret
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:192

int TinySoftwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     2e4:	8f ef       	ldi	r24, 0xFF	; 255
     2e6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:198
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     2e8:	08 95       	ret

000002ea <TinySoftwareSerial::peek()>:
_ZN18TinySoftwareSerial4peekEv():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:181
  }
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     2ea:	dc 01       	movw	r26, r24
     2ec:	1f 96       	adiw	r26, 0x0f	; 15
     2ee:	ed 91       	ld	r30, X+
     2f0:	fc 91       	ld	r31, X
     2f2:	20 a1       	ldd	r18, Z+32	; 0x20
     2f4:	31 a1       	ldd	r19, Z+33	; 0x21
     2f6:	82 a1       	ldd	r24, Z+34	; 0x22
     2f8:	93 a1       	ldd	r25, Z+35	; 0x23
     2fa:	28 17       	cp	r18, r24
     2fc:	39 07       	cpc	r19, r25
     2fe:	39 f0       	breq	.+14     	; 0x30e <TinySoftwareSerial::peek()+0x24>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:184
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     300:	82 a1       	ldd	r24, Z+34	; 0x22
     302:	93 a1       	ldd	r25, Z+35	; 0x23
     304:	e8 0f       	add	r30, r24
     306:	f9 1f       	adc	r31, r25
     308:	80 81       	ld	r24, Z
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	08 95       	ret
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:182
}

int TinySoftwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     30e:	8f ef       	ldi	r24, 0xFF	; 255
     310:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:186
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     312:	08 95       	ret

00000314 <TinySoftwareSerial::available()>:
_ZN18TinySoftwareSerial9availableEv():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:162
  _rx_buffer->head = _rx_buffer->tail;
}

int TinySoftwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     314:	dc 01       	movw	r26, r24
     316:	1f 96       	adiw	r26, 0x0f	; 15
     318:	ed 91       	ld	r30, X+
     31a:	fc 91       	ld	r31, X
     31c:	80 a1       	ldd	r24, Z+32	; 0x20
     31e:	91 a1       	ldd	r25, Z+33	; 0x21
     320:	22 a1       	ldd	r18, Z+34	; 0x22
     322:	33 a1       	ldd	r19, Z+35	; 0x23
     324:	82 1b       	sub	r24, r18
     326:	93 0b       	sbc	r25, r19
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:163
}
     328:	8f 71       	andi	r24, 0x1F	; 31
     32a:	99 27       	eor	r25, r25
     32c:	08 95       	ret

0000032e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:34

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     32e:	cf 92       	push	r12
     330:	df 92       	push	r13
     332:	ef 92       	push	r14
     334:	ff 92       	push	r15
     336:	0f 93       	push	r16
     338:	1f 93       	push	r17
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	7c 01       	movw	r14, r24
     340:	8a 01       	movw	r16, r20
     342:	eb 01       	movw	r28, r22
     344:	6b 01       	movw	r12, r22
     346:	c4 0e       	add	r12, r20
     348:	d5 1e       	adc	r13, r21
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:44
  // for character write regardless, so this as a valid assumption
  // at least in those cases.
  //
  // J.Sleeman (sparks@gogo.co.nz)
  
  for(size_t n = 0; n < size; n++)
     34a:	cc 15       	cp	r28, r12
     34c:	dd 05       	cpc	r29, r13
     34e:	51 f0       	breq	.+20     	; 0x364 <Print::write(unsigned char const*, unsigned int)+0x36>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:46
  {
    write(buffer[n]);
     350:	69 91       	ld	r22, Y+
     352:	d7 01       	movw	r26, r14
     354:	ed 91       	ld	r30, X+
     356:	fc 91       	ld	r31, X
     358:	01 90       	ld	r0, Z+
     35a:	f0 81       	ld	r31, Z
     35c:	e0 2d       	mov	r30, r0
     35e:	c7 01       	movw	r24, r14
     360:	09 95       	icall
     362:	f3 cf       	rjmp	.-26     	; 0x34a <Print::write(unsigned char const*, unsigned int)+0x1c>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:57
  while (size--) {
    n += write(*buffer++);
  }
  return n;
  */
}
     364:	c8 01       	movw	r24, r16
     366:	df 91       	pop	r29
     368:	cf 91       	pop	r28
     36a:	1f 91       	pop	r17
     36c:	0f 91       	pop	r16
     36e:	ff 90       	pop	r15
     370:	ef 90       	pop	r14
     372:	df 90       	pop	r13
     374:	cf 90       	pop	r12
     376:	08 95       	ret

00000378 <millis>:
millis():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:65
    ovrf++; //Increment counter every 256 clock cycles  
  }
  */

MillisMicrosTime_t millis()
{
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:67
  MillisMicrosTime_t x;
  uint8_t oldSREG = SREG;
     37c:	4f b7       	in	r20, 0x3f	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:68
  cli();
     37e:	f8 94       	cli
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:766
    // Jitter: 0.0083% (0.00008333329999999999 Decimal)
    x = (ovrf * 0)  + (ovrf / 4);
  #elif    ACCEPTABLE_MILLIS_ERROR_PPM >= 8197UL
    //  Error: 0.8197% (0.0081970502 Decimal)
    // Jitter: 0.0133% (0.0001333333 Decimal)
    x = (ovrf * 0)  + (ovrf / 4) + (ovrf / 256);
     380:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <ovrf>
     384:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <ovrf+0x1>
     388:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <ovrf+0x2>
     38c:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <ovrf+0x3>
     390:	60 91 93 00 	lds	r22, 0x0093	; 0x800093 <ovrf>
     394:	70 91 94 00 	lds	r23, 0x0094	; 0x800094 <ovrf+0x1>
     398:	80 91 95 00 	lds	r24, 0x0095	; 0x800095 <ovrf+0x2>
     39c:	90 91 96 00 	lds	r25, 0x0096	; 0x800096 <ovrf+0x3>
     3a0:	00 91 93 00 	lds	r16, 0x0093	; 0x800093 <ovrf>
     3a4:	10 91 94 00 	lds	r17, 0x0094	; 0x800094 <ovrf+0x1>
     3a8:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <ovrf+0x2>
     3ac:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <ovrf+0x3>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:1649
  //  Error: 0.0000% (0 Decimal)
  // Jitter: 0.0000% (0 Decimal)

  x = (ovrf * 500) ;
#endif
  SREG = oldSREG;
     3b0:	4f bf       	out	0x3f, r20	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:766
    // Jitter: 0.0083% (0.00008333329999999999 Decimal)
    x = (ovrf * 0)  + (ovrf / 4);
  #elif    ACCEPTABLE_MILLIS_ERROR_PPM >= 8197UL
    //  Error: 0.8197% (0.0081970502 Decimal)
    // Jitter: 0.0133% (0.0001333333 Decimal)
    x = (ovrf * 0)  + (ovrf / 4) + (ovrf / 256);
     3b2:	42 e0       	ldi	r20, 0x02	; 2
     3b4:	96 95       	lsr	r25
     3b6:	87 95       	ror	r24
     3b8:	77 95       	ror	r23
     3ba:	67 95       	ror	r22
     3bc:	4a 95       	dec	r20
     3be:	d1 f7       	brne	.-12     	; 0x3b4 <millis+0x3c>
     3c0:	01 2f       	mov	r16, r17
     3c2:	12 2f       	mov	r17, r18
     3c4:	23 2f       	mov	r18, r19
     3c6:	33 27       	eor	r19, r19
     3c8:	60 0f       	add	r22, r16
     3ca:	71 1f       	adc	r23, r17
     3cc:	82 1f       	adc	r24, r18
     3ce:	93 1f       	adc	r25, r19
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:1651

  x = (ovrf * 500) ;
#endif
  SREG = oldSREG;
  return x;
}
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	08 95       	ret

000003d6 <_turnOffPWM.part.1>:
_turnOffPWM.part.1():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/pins_arduino.c:68
  switch(t)
  {
    case TIMER0A:
    case TIMER0B:
      // Disconnect the pin from the timer (note, do not stop the timer just disconnect the pin!)  
      ( ( t==TIMER0A ) ? ( TCCR0A &= ~0B11000000 ) : ( TCCR0A &= ~0B00110000 ) );  
     3d6:	8a b5       	in	r24, 0x2a	; 42
     3d8:	8f 73       	andi	r24, 0x3F	; 63
     3da:	8a bd       	out	0x2a, r24	; 42
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/pins_arduino.c:75
    
    case TIMER1B:
      GTCCR  = (GTCCR & 0b10000001) | 0b01000000;
      break;
  }
}
     3dc:	08 95       	ret

000003de <_turnOffPWM>:
_turnOffPWM():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/pins_arduino.c:63
  }
}

void _turnOffPWM(uint8_t t)
{
  switch(t)
     3de:	81 30       	cpi	r24, 0x01	; 1
     3e0:	80 f0       	brcs	.+32     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     3e2:	83 30       	cpi	r24, 0x03	; 3
     3e4:	18 f0       	brcs	.+6      	; 0x3ec <_turnOffPWM+0xe>
     3e6:	84 30       	cpi	r24, 0x04	; 4
     3e8:	41 f0       	breq	.+16     	; 0x3fa <_turnOffPWM+0x1c>
     3ea:	08 95       	ret
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/pins_arduino.c:68
  {
    case TIMER0A:
    case TIMER0B:
      // Disconnect the pin from the timer (note, do not stop the timer just disconnect the pin!)  
      ( ( t==TIMER0A ) ? ( TCCR0A &= ~0B11000000 ) : ( TCCR0A &= ~0B00110000 ) );  
     3ec:	81 30       	cpi	r24, 0x01	; 1
     3ee:	09 f4       	brne	.+2      	; 0x3f2 <_turnOffPWM+0x14>
     3f0:	f2 cf       	rjmp	.-28     	; 0x3d6 <_turnOffPWM.part.1>
     3f2:	8a b5       	in	r24, 0x2a	; 42
     3f4:	8f 7c       	andi	r24, 0xCF	; 207
     3f6:	8a bd       	out	0x2a, r24	; 42
     3f8:	08 95       	ret
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/pins_arduino.c:72
    break;
    
    case TIMER1B:
      GTCCR  = (GTCCR & 0b10000001) | 0b01000000;
     3fa:	8c b5       	in	r24, 0x2c	; 44
     3fc:	81 78       	andi	r24, 0x81	; 129
     3fe:	80 64       	ori	r24, 0x40	; 64
     400:	8c bd       	out	0x2c, r24	; 44
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/pins_arduino.c:75
      break;
  }
}
     402:	08 95       	ret

00000404 <_digitalWrite>:
_digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:176
  }
}
#endif

void _digitalWrite(uint8_t pin, uint8_t val)
{
     404:	0f 93       	push	r16
     406:	1f 93       	push	r17
     408:	cf 93       	push	r28
     40a:	df 93       	push	r29
     40c:	06 2f       	mov	r16, r22
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:177
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     40e:	87 ff       	sbrs	r24, 7
     410:	1f c0       	rjmp	.+62     	; 0x450 <_digitalWrite+0x4c>
     412:	8f 77       	andi	r24, 0x7F	; 127
     414:	83 30       	cpi	r24, 0x03	; 3
     416:	31 f1       	breq	.+76     	; 0x464 <_digitalWrite+0x60>
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	31 f1       	breq	.+76     	; 0x468 <_digitalWrite+0x64>
     41c:	82 30       	cpi	r24, 0x02	; 2
     41e:	41 f1       	breq	.+80     	; 0x470 <_digitalWrite+0x6c>
     420:	81 11       	cpse	r24, r1
     422:	24 c0       	rjmp	.+72     	; 0x46c <_digitalWrite+0x68>
     424:	85 e0       	ldi	r24, 0x05	; 5
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:179
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
     426:	c1 e0       	ldi	r28, 0x01	; 1
     428:	d0 e0       	ldi	r29, 0x00	; 0
     42a:	01 c0       	rjmp	.+2      	; 0x42e <_digitalWrite+0x2a>
     42c:	cc 0f       	add	r28, r28
     42e:	8a 95       	dec	r24
     430:	ea f7       	brpl	.-6      	; 0x42c <_digitalWrite+0x28>
     432:	1c 2f       	mov	r17, r28
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:216
  // for Tiny processors.
  //
  // The reasoning for disabling them at all is here:
  //   https://github.com/arduino/Arduino/issues/146
  // in short, yes it's necessary.
  uint8_t oldSREG = SREG;
     434:	9f b7       	in	r25, 0x3f	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:217
  cli();
     436:	f8 94       	cli
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:221
  switch(val)
  {
    case LOW:
      *out &= ~bit; // Write LOW
     438:	88 b3       	in	r24, 0x18	; 24
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:218
  // The reasoning for disabling them at all is here:
  //   https://github.com/arduino/Arduino/issues/146
  // in short, yes it's necessary.
  uint8_t oldSREG = SREG;
  cli();
  switch(val)
     43a:	01 11       	cpse	r16, r1
     43c:	27 c0       	rjmp	.+78     	; 0x48c <_digitalWrite+0x88>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:221
  {
    case LOW:
      *out &= ~bit; // Write LOW
     43e:	c0 95       	com	r28
     440:	c8 23       	and	r28, r24
     442:	c8 bb       	out	0x18, r28	; 24
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:229
    case HIGH:
    default  :
      *out |= bit; // Write HIGH
      break;
  }
  SREG = oldSREG;
     444:	9f bf       	out	0x3f, r25	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:231
#endif
}
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	1f 91       	pop	r17
     44c:	0f 91       	pop	r16
     44e:	08 95       	ret
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:178
#endif

void _digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     450:	88 23       	and	r24, r24
     452:	89 f0       	breq	.+34     	; 0x476 <_digitalWrite+0x72>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	a9 f0       	breq	.+42     	; 0x482 <_digitalWrite+0x7e>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:179
  uint8_t bit = digitalPinToBitMask(pin);
     458:	10 e1       	ldi	r17, 0x10	; 16
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:178
#endif

void _digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     45a:	84 30       	cpi	r24, 0x04	; 4
     45c:	21 f7       	brne	.-56     	; 0x426 <_digitalWrite+0x22>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:179
  uint8_t bit = digitalPinToBitMask(pin);
     45e:	c0 e1       	ldi	r28, 0x10	; 16
     460:	d0 e0       	ldi	r29, 0x00	; 0
     462:	0d c0       	rjmp	.+26     	; 0x47e <_digitalWrite+0x7a>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:177
}
#endif

void _digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     464:	83 e0       	ldi	r24, 0x03	; 3
     466:	df cf       	rjmp	.-66     	; 0x426 <_digitalWrite+0x22>
     468:	82 e0       	ldi	r24, 0x02	; 2
     46a:	dd cf       	rjmp	.-70     	; 0x426 <_digitalWrite+0x22>
     46c:	8f ef       	ldi	r24, 0xFF	; 255
     46e:	db cf       	rjmp	.-74     	; 0x426 <_digitalWrite+0x22>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:179
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
     470:	10 e1       	ldi	r17, 0x10	; 16
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:178
#endif

void _digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     472:	84 e0       	ldi	r24, 0x04	; 4
     474:	f4 cf       	rjmp	.-24     	; 0x45e <_digitalWrite+0x5a>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:179
  uint8_t bit = digitalPinToBitMask(pin);
     476:	11 e0       	ldi	r17, 0x01	; 1
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:178
#endif

void _digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     478:	81 e0       	ldi	r24, 0x01	; 1
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:179
  uint8_t bit = digitalPinToBitMask(pin);
     47a:	c1 e0       	ldi	r28, 0x01	; 1
     47c:	d0 e0       	ldi	r29, 0x00	; 0
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:187

  if (port == NOT_A_PIN) return;

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
     47e:	af df       	rcall	.-162    	; 0x3de <_turnOffPWM>
     480:	d9 cf       	rjmp	.-78     	; 0x434 <_digitalWrite+0x30>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:179

void _digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
     482:	12 e0       	ldi	r17, 0x02	; 2
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:178
#endif

void _digitalWrite(uint8_t pin, uint8_t val)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  uint8_t timer = digitalPinToTimer(pin);
     484:	83 e0       	ldi	r24, 0x03	; 3
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:179
  uint8_t bit = digitalPinToBitMask(pin);
     486:	c2 e0       	ldi	r28, 0x02	; 2
     488:	d0 e0       	ldi	r29, 0x00	; 0
     48a:	f9 cf       	rjmp	.-14     	; 0x47e <_digitalWrite+0x7a>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:226
      *out &= ~bit; // Write LOW
      break;
    
    case HIGH:
    default  :
      *out |= bit; // Write HIGH
     48c:	18 2b       	or	r17, r24
     48e:	18 bb       	out	0x18, r17	; 24
     490:	d9 cf       	rjmp	.-78     	; 0x444 <_digitalWrite+0x40>

00000492 <ps2_reset()>:
_Z9ps2_resetv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:620


void ps2_reset( void )
{
/* reset buffers and states */
_tx_head = 0;
     492:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <_tx_head>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:621
_tx_tail = 0;
     496:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <_tx_tail>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:622
_tx_ready = 0;
     49a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <_tx_ready>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:623
_response_count = 0;
     49e:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <_response_count>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:624
_head = 0;
     4a2:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <_head>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:625
_tail = 0;
     4a6:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <_tail>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:626
_bitcount = 0;
     4aa:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <_bitcount>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:627
PS2_keystatus = 0;
     4ae:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <PS2_keystatus>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:628
PS2_led_lock = 0;
     4b2:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <PS2_led_lock>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:629
_ps2mode = 0;
     4b6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:630
}
     4ba:	08 95       	ret

000004bc <send_byte(unsigned char)>:
_Z9send_byteh():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:592
    Returns 1 byte written when done */
int send_byte( uint8_t val )
{
uint8_t ret;

ret = _tx_head + 1;
     4bc:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <_tx_head>
     4c0:	9f 5f       	subi	r25, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:593
if( ret >= _TX_BUFFER_SIZE )
     4c2:	96 30       	cpi	r25, 0x06	; 6
     4c4:	08 f0       	brcs	.+2      	; 0x4c8 <send_byte(unsigned char)+0xc>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:594
  ret = 0;
     4c6:	90 e0       	ldi	r25, 0x00	; 0
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:595
if( ret != _tx_tail )
     4c8:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <_tx_tail>
     4cc:	29 17       	cp	r18, r25
     4ce:	51 f0       	breq	.+20     	; 0x4e4 <send_byte(unsigned char)+0x28>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:597
  {
  _tx_buff[ ret ] = val;
     4d0:	e9 2f       	mov	r30, r25
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	e1 58       	subi	r30, 0x81	; 129
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	80 83       	st	Z, r24
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:598
  _tx_head = ret;
     4da:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <_tx_head>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:599
  return 1;
     4de:	81 e0       	ldi	r24, 0x01	; 1
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	08 95       	ret
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:601
  }
return -4;
     4e4:	8c ef       	ldi	r24, 0xFC	; 252
     4e6:	9f ef       	ldi	r25, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:602
}
     4e8:	08 95       	ret

000004ea <pininput(unsigned char)>:
_Z8pininputh():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:274
      return;
    }
    #endif
  }

  _pinMode(pin,mode);  
     4ea:	62 e0       	ldi	r22, 0x02	; 2
     4ec:	8c ce       	rjmp	.-744    	; 0x206 <_pinMode>

000004ee <send_now(unsigned char)>:
_Z8send_nowh():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:478
    _COMMAND     other commands not part of receiving
  Main difference _bytes_expected is NOT altered in _HANDSHAKE mode
  in command mode we update _bytes_expected with number of response bytes
*/
void send_now( uint8_t command )
{
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:479
_shiftdata = command;
     4f2:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <_shiftdata>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:480
_now_send = command;     // copy for later to save in last sent
     4f6:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <_now_send>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:482
#if defined( PS2_CLEAR_PENDING_IRQ ) 
_bitcount = 0;          // AVR/SAM ignore extra interrupt
     4fa:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <_bitcount>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:486
#else
_bitcount = 1;          // Normal processors
#endif
_parity = 0;
     4fe:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <_parity>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:487
_ps2mode |= _TX_MODE + _PS2_BUSY;
     502:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     506:	80 6c       	ori	r24, 0xC0	; 192
     508:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:490

// Only do this if sending a command not from Handshaking
if( !( _tx_ready & _HANDSHAKE ) && ( _tx_ready & _COMMAND ) )
     50c:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <_tx_ready>
     510:	87 fd       	sbrc	r24, 7
     512:	0d c0       	rjmp	.+26     	; 0x52e <send_now(unsigned char)+0x40>
     514:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <_tx_ready>
     518:	80 ff       	sbrs	r24, 0
     51a:	09 c0       	rjmp	.+18     	; 0x52e <send_now(unsigned char)+0x40>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:492
  {
  _bytes_expected = _response_count;  // How many bytes command will generate
     51c:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <_response_count>
     520:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <_bytes_expected>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:493
  _ps2mode |= _WAIT_RESPONSE;
     524:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     528:	80 61       	ori	r24, 0x10	; 16
     52a:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:498
  }

// STOP interrupt handler 
// Setting pin output low will cause interrupt before ready
detachInterrupt( digitalPinToInterrupt( PS2_IrqPin ) );
     52e:	80 91 97 00 	lds	r24, 0x0097	; 0x800097 <PS2_IrqPin>
     532:	82 30       	cpi	r24, 0x02	; 2
     534:	39 f4       	brne	.+14     	; 0x544 <send_now(unsigned char)+0x56>
detachInterrupt():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:119

    switch (interruptNum)
    {
      #if NUMBER_EXTERNAL_INTERRUPTS >= 1
        case EXTERNAL_INTERRUPT_0:
          EIMSK &= ~(1 << INT0);
     536:	8b b7       	in	r24, 0x3b	; 59
     538:	8f 7b       	andi	r24, 0xBF	; 191
     53a:	8b bf       	out	0x3b, r24	; 59
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:133

      #if NUMBER_EXTERNAL_INTERRUPTS > 2
      #error Add handlers for the additional interrupts.
      #endif
    }
    intFunc[interruptNum] = 0;
     53c:	10 92 3e 01 	sts	0x013E, r1	; 0x80013e <intFunc+0x1>
     540:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <intFunc>
_Z8send_nowh():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:500
// set pins to outputs and high
digitalWrite( PS2_DataPin, HIGH );
     544:	d0 91 98 00 	lds	r29, 0x0098	; 0x800098 <PS2_DataPin>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:346
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) &= ~digitalPinToBitMask(pin)));
      return;
    }
  }

  _digitalWrite(pin,val);
     548:	61 e0       	ldi	r22, 0x01	; 1
     54a:	8d 2f       	mov	r24, r29
     54c:	5b df       	rcall	.-330    	; 0x404 <_digitalWrite>
pinMode():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:274
      return;
    }
    #endif
  }

  _pinMode(pin,mode);  
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	8d 2f       	mov	r24, r29
     552:	59 de       	rcall	.-846    	; 0x206 <_pinMode>
_Z8send_nowh():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:502
pinMode( PS2_DataPin, OUTPUT );
digitalWrite( PS2_IrqPin, HIGH );
     554:	c0 91 97 00 	lds	r28, 0x0097	; 0x800097 <PS2_IrqPin>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:346
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) &= ~digitalPinToBitMask(pin)));
      return;
    }
  }

  _digitalWrite(pin,val);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	8c 2f       	mov	r24, r28
     55c:	53 df       	rcall	.-346    	; 0x404 <_digitalWrite>
pinMode():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:274
      return;
    }
    #endif
  }

  _pinMode(pin,mode);  
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	8c 2f       	mov	r24, r28
     562:	51 de       	rcall	.-862    	; 0x206 <_pinMode>
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065



#if ! ( defined( REDUCED_CORE_TINYAVR ) && REDUCED_CORE_TINYAVR )
  // The 4/5/9/10 "Reduced Core" have problems with GCC compiling this    
  __asm__ __volatile__ (
     564:	80 e1       	ldi	r24, 0x10	; 16
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	01 97       	sbiw	r24, 0x01	; 1
     56a:	f1 f7       	brne	.-4      	; 0x568 <send_now(unsigned char)+0x7a>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:346
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) &= ~digitalPinToBitMask(pin)));
      return;
    }
  }

  _digitalWrite(pin,val);
     56c:	60 e0       	ldi	r22, 0x00	; 0
     56e:	8c 2f       	mov	r24, r28
     570:	49 df       	rcall	.-366    	; 0x404 <_digitalWrite>
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065
     572:	84 e7       	ldi	r24, 0x74	; 116
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	01 97       	sbiw	r24, 0x01	; 1
     578:	f1 f7       	brne	.-4      	; 0x576 <send_now(unsigned char)+0x88>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:346
     57a:	60 e0       	ldi	r22, 0x00	; 0
     57c:	8d 2f       	mov	r24, r29
     57e:	42 df       	rcall	.-380    	; 0x404 <_digitalWrite>
_Z8send_nowh():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:514
// set clock low for 60us
delayMicroseconds( 60 );
// Set data low - Start bit
digitalWrite( PS2_DataPin, LOW );
// set clock to input_pullup data stays output while writing to keyboard
pininput( PS2_IrqPin );
     580:	8c 2f       	mov	r24, r28
     582:	b3 df       	rcall	.-154    	; 0x4ea <pininput(unsigned char)>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:516
// Restart interrupt handler
attachInterrupt( digitalPinToInterrupt( PS2_IrqPin ), ps2interrupt, FALLING );
     584:	c2 30       	cpi	r28, 0x02	; 2
     586:	19 f4       	brne	.+6      	; 0x58e <send_now(unsigned char)+0xa0>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:518
//  wait clock interrupt to send data
}
     588:	df 91       	pop	r29
     58a:	cf 91       	pop	r28
attachInterrupt():
     58c:	2b ce       	rjmp	.-938    	; 0x1e4 <attachInterrupt.part.0.constprop.12>
_Z8send_nowh():
     58e:	df 91       	pop	r29
     590:	cf 91       	pop	r28
     592:	08 95       	ret

00000594 <send_next()>:
_Z9send_nextv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:543
uint8_t  i;
int16_t  val;

val = -1;
// Check buffer not empty
i = _tx_tail;
     594:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <_tx_tail>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:544
if( i == _tx_head )
     598:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <_tx_head>
     59c:	89 17       	cp	r24, r25
     59e:	91 f1       	breq	.+100    	; 0x604 <send_next()+0x70>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:548
  return -2;

// set command bit in _tx_ready as another command to do
_tx_ready |= _COMMAND;
     5a0:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <_tx_ready>
     5a4:	81 60       	ori	r24, 0x01	; 1
     5a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <_tx_ready>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:551

// Already item waiting to be sent or sending interrupt routines will call back
if( _tx_ready & _HANDSHAKE )
     5aa:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <_tx_ready>
     5ae:	87 fd       	sbrc	r24, 7
     5b0:	2c c0       	rjmp	.+88     	; 0x60a <send_next()+0x76>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:555
  return -134;

// if busy let interrupt catch and call us again
if( _ps2mode & _PS2_BUSY )
     5b2:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     5b6:	87 fd       	sbrc	r24, 7
     5b8:	28 c0       	rjmp	.+80     	; 0x60a <send_next()+0x76>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:560
  return -134;

// Following only accessed when not receiving or sending protocol bytes
// Scan for command response and expected bytes to follow
_response_count = 0;
     5ba:	10 92 87 00 	sts	0x0087, r1	; 0x800087 <_response_count>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:541
int16_t send_next( void )
{
uint8_t  i;
int16_t  val;

val = -1;
     5be:	2f ef       	ldi	r18, 0xFF	; 255
     5c0:	3f ef       	ldi	r19, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:563
// Following only accessed when not receiving or sending protocol bytes
// Scan for command response and expected bytes to follow
_response_count = 0;
do
  {
  i++;
     5c2:	9f 5f       	subi	r25, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:564
  if( i >= _TX_BUFFER_SIZE )
     5c4:	96 30       	cpi	r25, 0x06	; 6
     5c6:	08 f0       	brcs	.+2      	; 0x5ca <send_next()+0x36>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:565
    i = 0;
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	e9 2f       	mov	r30, r25
     5cc:	f0 e0       	ldi	r31, 0x00	; 0
     5ce:	e1 58       	subi	r30, 0x81	; 129
     5d0:	ff 4f       	sbci	r31, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:566
  if( val == -1 )
     5d2:	2f 3f       	cpi	r18, 0xFF	; 255
     5d4:	32 07       	cpc	r19, r18
     5d6:	69 f4       	brne	.+26     	; 0x5f2 <send_next()+0x5e>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:567
    val = _tx_buff[ i ];
     5d8:	20 81       	ld	r18, Z
     5da:	30 e0       	ldi	r19, 0x00	; 0
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:573
  else
    if( _tx_buff[ i ] != PS2_KEY_IGNORE )
      break;
    else
      _response_count++;
  _tx_tail = i;
     5dc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <_tx_tail>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:575
  }
while( i != _tx_head );
     5e0:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <_tx_head>
     5e4:	89 13       	cpse	r24, r25
     5e6:	ed cf       	rjmp	.-38     	; 0x5c2 <send_next()+0x2e>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:577
// Now know what to send and expect start the actual wire sending
send_now( val );
     5e8:	82 2f       	mov	r24, r18
     5ea:	81 df       	rcall	.-254    	; 0x4ee <send_now(unsigned char)>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:578
return 1;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	08 95       	ret
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:569
  if( i >= _TX_BUFFER_SIZE )
    i = 0;
  if( val == -1 )
    val = _tx_buff[ i ];
  else
    if( _tx_buff[ i ] != PS2_KEY_IGNORE )
     5f2:	80 81       	ld	r24, Z
     5f4:	8b 3b       	cpi	r24, 0xBB	; 187
     5f6:	c1 f7       	brne	.-16     	; 0x5e8 <send_next()+0x54>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:572
      break;
    else
      _response_count++;
     5f8:	80 91 87 00 	lds	r24, 0x0087	; 0x800087 <_response_count>
     5fc:	8f 5f       	subi	r24, 0xFF	; 255
     5fe:	80 93 87 00 	sts	0x0087, r24	; 0x800087 <_response_count>
     602:	ec cf       	rjmp	.-40     	; 0x5dc <send_next()+0x48>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:545

val = -1;
// Check buffer not empty
i = _tx_tail;
if( i == _tx_head )
  return -2;
     604:	8e ef       	ldi	r24, 0xFE	; 254
     606:	9f ef       	ldi	r25, 0xFF	; 255
     608:	08 95       	ret
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:552
// set command bit in _tx_ready as another command to do
_tx_ready |= _COMMAND;

// Already item waiting to be sent or sending interrupt routines will call back
if( _tx_ready & _HANDSHAKE )
  return -134;
     60a:	8a e7       	ldi	r24, 0x7A	; 122
     60c:	9f ef       	ldi	r25, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:579
  }
while( i != _tx_head );
// Now know what to send and expect start the actual wire sending
send_now( val );
return 1;
}
     60e:	08 95       	ret

00000610 <PS2KeyAdvanced::available() [clone .constprop.4]>:
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:943
  Returns   0 buffer empty
            1 to buffer size less 1 as 1 to full buffer

  As with other ring buffers here when pointers match
  buffer empty so cannot actually hold buffer size values  */
uint8_t PS2KeyAdvanced::available( )
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:949
{
int8_t  i, idx;
uint16_t data;

// check output queue
i = _key_head - _key_tail;
     618:	10 91 3c 01 	lds	r17, 0x013C	; 0x80013c <_key_head>
     61c:	80 91 3b 01 	lds	r24, 0x013B	; 0x80013b <_key_tail>
     620:	18 1b       	sub	r17, r24
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:950
if( i < 0 )
     622:	17 fd       	sbrc	r17, 7
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:951
  i += _KEY_BUFF_SIZE;
     624:	1c 5f       	subi	r17, 0xFC	; 252
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:741
      {
      if( PS2_lockstate[ retdata ] == 1 )
        retdata = PS2_KEY_IGNORE;   // ignore key if make and not received break
      else
        {
        PS2_lockstate[ retdata ] = 1;
     626:	01 e0       	ldi	r16, 0x01	; 1
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:952

// check output queue
i = _key_head - _key_tail;
if( i < 0 )
  i += _KEY_BUFF_SIZE;
while( i < ( _KEY_BUFF_SIZE - 1 ) ) // process if not full
     628:	13 30       	cpi	r17, 0x03	; 3
     62a:	64 f5       	brge	.+88     	; 0x684 <PS2KeyAdvanced::available() [clone .constprop.4]+0x74>
key_available():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:637

uint8_t key_available( )
{
int8_t  i;

i = _head - _tail;
     62c:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_head>
     630:	a0 91 31 01 	lds	r26, 0x0131	; 0x800131 <_tail>
     634:	8a 1b       	sub	r24, r26
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:638
if( i < 0 )
     636:	87 fd       	sbrc	r24, 7
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:639
  i += _RX_BUFFER_SIZE;
     638:	88 5f       	subi	r24, 0xF8	; 248
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:953
// check output queue
i = _key_head - _key_tail;
if( i < 0 )
  i += _KEY_BUFF_SIZE;
while( i < ( _KEY_BUFF_SIZE - 1 ) ) // process if not full
  if( key_available( ) )         // not check for more keys to process
     63a:	88 23       	and	r24, r24
     63c:	19 f1       	breq	.+70     	; 0x684 <PS2KeyAdvanced::available() [clone .constprop.4]+0x74>
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:662

// get next character
// Check first something to fetch
index = _tail;
// check for empty buffer
if( index == _head )
     63e:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <_head>
     642:	a8 17       	cp	r26, r24
     644:	f9 f0       	breq	.+62     	; 0x684 <PS2KeyAdvanced::available() [clone .constprop.4]+0x74>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:664
  return 0;
index++;
     646:	af 5f       	subi	r26, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:665
if( index >= _RX_BUFFER_SIZE )
     648:	a8 30       	cpi	r26, 0x08	; 8
     64a:	08 f0       	brcs	.+2      	; 0x64e <PS2KeyAdvanced::available() [clone .constprop.4]+0x3e>
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:666
  index = 0;
     64c:	a0 e0       	ldi	r26, 0x00	; 0
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:667
_tail = index;
     64e:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <_tail>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:669
// Get the flags byte break modes etc in this order
data = _rx_buffer[ index ] & 0xFF;
     652:	b0 e0       	ldi	r27, 0x00	; 0
     654:	aa 0f       	add	r26, r26
     656:	bb 1f       	adc	r27, r27
     658:	af 5d       	subi	r26, 0xDF	; 223
     65a:	be 4f       	sbci	r27, 0xFE	; 254
     65c:	cd 91       	ld	r28, X+
     65e:	dc 91       	ld	r29, X
     660:	11 97       	sbiw	r26, 0x01	; 1
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:670
index = ( _rx_buffer[ index ] & 0xFF00 ) >> 8;
     662:	8d 91       	ld	r24, X+
     664:	9c 91       	ld	r25, X
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:673

// Catch special case of PAUSE key
if( index & _E1_MODE )
     666:	92 fd       	sbrc	r25, 2
     668:	ba c0       	rjmp	.+372    	; 0x7de <PS2KeyAdvanced::available() [clone .constprop.4]+0x1ce>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:669
index++;
if( index >= _RX_BUFFER_SIZE )
  index = 0;
_tail = index;
// Get the flags byte break modes etc in this order
data = _rx_buffer[ index ] & 0xFF;
     66a:	2c 2f       	mov	r18, r28
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:678
if( index & _E1_MODE )
  return  PS2_KEY_PAUSE + _FUNCTION;

// Ignore anything not actual keycode but command/response
// Return untranslated as valid
if( ( data >= PS2_KC_BAT && data != PS2_KC_LANG1 && data != PS2_KC_LANG2 )
     66c:	ca 3a       	cpi	r28, 0xAA	; 170
     66e:	20 f0       	brcs	.+8      	; 0x678 <PS2KeyAdvanced::available() [clone .constprop.4]+0x68>
     670:	8c 2f       	mov	r24, r28
     672:	81 5f       	subi	r24, 0xF1	; 241
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	10 f4       	brcc	.+4      	; 0x67c <PS2KeyAdvanced::available() [clone .constprop.4]+0x6c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:679
    || ( index & _WAIT_RESPONSE ) )
     678:	94 ff       	sbrs	r25, 4
     67a:	0a c0       	rjmp	.+20     	; 0x690 <PS2KeyAdvanced::available() [clone .constprop.4]+0x80>
     67c:	dd 27       	eor	r29, r29
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:956
  i += _KEY_BUFF_SIZE;
while( i < ( _KEY_BUFF_SIZE - 1 ) ) // process if not full
  if( key_available( ) )         // not check for more keys to process
    {
    data = translate( );         // get next translated key
    if( data == 0 )             // unless in buffer is empty
     67e:	20 97       	sbiw	r28, 0x00	; 0
     680:	09 f0       	breq	.+2      	; 0x684 <PS2KeyAdvanced::available() [clone .constprop.4]+0x74>
     682:	af c0       	rjmp	.+350    	; 0x7e2 <PS2KeyAdvanced::available() [clone .constprop.4]+0x1d2>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:972
      }
    }
  else
    break;                      // exit nothing coming in
return uint8_t( i );
}
     684:	81 2f       	mov	r24, r17
     686:	df 91       	pop	r29
     688:	cf 91       	pop	r28
     68a:	1f 91       	pop	r17
     68c:	0f 91       	pop	r16
     68e:	08 95       	ret
     690:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <PS2_keystatus>
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:683
if( ( data >= PS2_KC_BAT && data != PS2_KC_LANG1 && data != PS2_KC_LANG2 )
    || ( index & _WAIT_RESPONSE ) )
  return ( uint16_t )data;

// Gather the break of key status
if( index & _BREAK_KEY )
     694:	95 ff       	sbrs	r25, 5
     696:	18 c0       	rjmp	.+48     	; 0x6c8 <PS2KeyAdvanced::available() [clone .constprop.4]+0xb8>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:684
  PS2_keystatus |= _BREAK;
     698:	80 68       	ori	r24, 0x80	; 128
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:686
else
  PS2_keystatus &= ~_BREAK;
     69a:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <PS2_keystatus>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:690

retdata = 0;    // error code by default
// Scan appropriate table
if( index & _E0_MODE )
     69e:	d0 e0       	ldi	r29, 0x00	; 0
     6a0:	c0 e0       	ldi	r28, 0x00	; 0
     6a2:	93 ff       	sbrs	r25, 3
     6a4:	1e c0       	rjmp	.+60     	; 0x6e2 <PS2KeyAdvanced::available() [clone .constprop.4]+0xd2>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:695
  {
  length = sizeof( extended_key ) / sizeof( extended_key[ 0 ] );
  for( index = 0; index < length; index++ )
#if defined( PS2_REQUIRES_PROGMEM )
     if( data == pgm_read_byte( &extended_key[ index ][ 0 ] ) )
     6a6:	fe 01       	movw	r30, r28
     6a8:	ec 5b       	subi	r30, 0xBC	; 188
     6aa:	fe 4f       	sbci	r31, 0xFE	; 254
     6ac:	e4 91       	lpm	r30, Z
     6ae:	2e 13       	cpse	r18, r30
     6b0:	0d c0       	rjmp	.+26     	; 0x6cc <PS2KeyAdvanced::available() [clone .constprop.4]+0xbc>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:697
       {
       retdata = pgm_read_byte( &extended_key[ index ][ 1 ] );
     6b2:	cb 5b       	subi	r28, 0xBB	; 187
     6b4:	de 4f       	sbci	r29, 0xFE	; 254
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:713
  length = sizeof( single_key ) / sizeof( single_key[ 0 ] );
  for( index = 0; index < length; index++ )
#if defined( PS2_REQUIRES_PROGMEM )
     if( data == pgm_read_byte( &single_key[ index ][ 0 ] ) )
       {
       retdata = pgm_read_byte( &single_key[ index ][ 1 ] );
     6b6:	fe 01       	movw	r30, r28
     6b8:	c4 91       	lpm	r28, Z
     6ba:	d0 e0       	ldi	r29, 0x00	; 0
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:726
  }
// trap not found key
if( index == length )
  retdata = 0;
/* valid found values only */
if( retdata > 0 )
     6bc:	20 97       	sbiw	r28, 0x00	; 0
     6be:	d1 f4       	brne	.+52     	; 0x6f4 <PS2KeyAdvanced::available() [clone .constprop.4]+0xe4>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:803
  if( ( retdata <= PS2_KEY_SPACE || retdata >= PS2_KEY_F1 ) && retdata != PS2_KEY_EUROPE2 )
    PS2_keystatus |= _FUNCTION;
  else
    PS2_keystatus &= ~_FUNCTION;
  }
return ( retdata | ( (uint16_t)PS2_keystatus << 8 ) );
     6c0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <PS2_keystatus>
     6c4:	d8 2b       	or	r29, r24
     6c6:	db cf       	rjmp	.-74     	; 0x67e <PS2KeyAdvanced::available() [clone .constprop.4]+0x6e>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:686

// Gather the break of key status
if( index & _BREAK_KEY )
  PS2_keystatus |= _BREAK;
else
  PS2_keystatus &= ~_BREAK;
     6c8:	8f 77       	andi	r24, 0x7F	; 127
     6ca:	e7 cf       	rjmp	.-50     	; 0x69a <PS2KeyAdvanced::available() [clone .constprop.4]+0x8a>
     6cc:	22 96       	adiw	r28, 0x02	; 2
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:693
retdata = 0;    // error code by default
// Scan appropriate table
if( index & _E0_MODE )
  {
  length = sizeof( extended_key ) / sizeof( extended_key[ 0 ] );
  for( index = 0; index < length; index++ )
     6ce:	c2 35       	cpi	r28, 0x52	; 82
     6d0:	d1 05       	cpc	r29, r1
     6d2:	49 f7       	brne	.-46     	; 0x6a6 <PS2KeyAdvanced::available() [clone .constprop.4]+0x96>
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:724
       break;
       }
  }
// trap not found key
if( index == length )
  retdata = 0;
     6d4:	d0 e0       	ldi	r29, 0x00	; 0
     6d6:	c0 e0       	ldi	r28, 0x00	; 0
     6d8:	f3 cf       	rjmp	.-26     	; 0x6c0 <PS2KeyAdvanced::available() [clone .constprop.4]+0xb0>
     6da:	22 96       	adiw	r28, 0x02	; 2
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:709
       }
  }
else
  {
  length = sizeof( single_key ) / sizeof( single_key[ 0 ] );
  for( index = 0; index < length; index++ )
     6dc:	ce 3d       	cpi	r28, 0xDE	; 222
     6de:	d1 05       	cpc	r29, r1
     6e0:	c9 f3       	breq	.-14     	; 0x6d4 <PS2KeyAdvanced::available() [clone .constprop.4]+0xc4>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:711
#if defined( PS2_REQUIRES_PROGMEM )
     if( data == pgm_read_byte( &single_key[ index ][ 0 ] ) )
     6e2:	fe 01       	movw	r30, r28
     6e4:	ea 59       	subi	r30, 0x9A	; 154
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	e4 91       	lpm	r30, Z
     6ea:	2e 13       	cpse	r18, r30
     6ec:	f6 cf       	rjmp	.-20     	; 0x6da <PS2KeyAdvanced::available() [clone .constprop.4]+0xca>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:713
       {
       retdata = pgm_read_byte( &single_key[ index ][ 1 ] );
     6ee:	c9 59       	subi	r28, 0x99	; 153
     6f0:	df 4f       	sbci	r29, 0xFF	; 255
     6f2:	e1 cf       	rjmp	.-62     	; 0x6b6 <PS2KeyAdvanced::available() [clone .constprop.4]+0xa6>
     6f4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <PS2_keystatus>
     6f8:	fe 01       	movw	r30, r28
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:728
if( index == length )
  retdata = 0;
/* valid found values only */
if( retdata > 0 )
  {
  if( retdata <= PS2_KEY_CAPS )
     6fa:	c4 30       	cpi	r28, 0x04	; 4
     6fc:	d1 05       	cpc	r29, r1
     6fe:	08 f0       	brcs	.+2      	; 0x702 <PS2KeyAdvanced::available() [clone .constprop.4]+0xf2>
     700:	4b c0       	rjmp	.+150    	; 0x798 <PS2KeyAdvanced::available() [clone .constprop.4]+0x188>
     702:	e4 5e       	subi	r30, 0xE4	; 228
     704:	fe 4f       	sbci	r31, 0xFE	; 254
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:730
    {   // process lock keys need second make to turn off
    if( PS2_keystatus & _BREAK )
     706:	87 ff       	sbrs	r24, 7
     708:	04 c0       	rjmp	.+8      	; 0x712 <PS2KeyAdvanced::available() [clone .constprop.4]+0x102>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:732
      {
      PS2_lockstate[ retdata ] = 0; // Set received a break so next make toggles LOCK status
     70a:	10 82       	st	Z, r1
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:738
      retdata = PS2_KEY_IGNORE;     // ignore key
      }
    else
      {
      if( PS2_lockstate[ retdata ] == 1 )
        retdata = PS2_KEY_IGNORE;   // ignore key if make and not received break
     70c:	cb eb       	ldi	r28, 0xBB	; 187
     70e:	d0 e0       	ldi	r29, 0x00	; 0
     710:	25 c0       	rjmp	.+74     	; 0x75c <PS2KeyAdvanced::available() [clone .constprop.4]+0x14c>
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:737
      PS2_lockstate[ retdata ] = 0; // Set received a break so next make toggles LOCK status
      retdata = PS2_KEY_IGNORE;     // ignore key
      }
    else
      {
      if( PS2_lockstate[ retdata ] == 1 )
     712:	90 81       	ld	r25, Z
     714:	91 30       	cpi	r25, 0x01	; 1
     716:	d1 f3       	breq	.-12     	; 0x70c <PS2KeyAdvanced::available() [clone .constprop.4]+0xfc>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:741
        retdata = PS2_KEY_IGNORE;   // ignore key if make and not received break
      else
        {
        PS2_lockstate[ retdata ] = 1;
     718:	00 83       	st	Z, r16
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:742
        switch( retdata )
     71a:	c2 30       	cpi	r28, 0x02	; 2
     71c:	d1 05       	cpc	r29, r1
     71e:	b1 f1       	breq	.+108    	; 0x78c <PS2KeyAdvanced::available() [clone .constprop.4]+0x17c>
     720:	c3 30       	cpi	r28, 0x03	; 3
     722:	d1 05       	cpc	r29, r1
     724:	51 f1       	breq	.+84     	; 0x77a <PS2KeyAdvanced::available() [clone .constprop.4]+0x16a>
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:753
                               else
                                 PS2_keystatus |= _CAPS;
                               break;
          case PS2_KEY_SCROLL: index = PS2_LOCK_SCROLL;
                               break;
          case PS2_KEY_NUM:    index = PS2_LOCK_NUM;
     726:	82 e0       	ldi	r24, 0x02	; 2
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:757
                               break;
          }
        // Now update PS2_led_lock status to match
        if( PS2_led_lock & index )
     728:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <PS2_led_lock>
     72c:	29 2f       	mov	r18, r25
     72e:	28 23       	and	r18, r24
     730:	79 f1       	breq	.+94     	; 0x790 <PS2KeyAdvanced::available() [clone .constprop.4]+0x180>
     732:	20 91 20 01 	lds	r18, 0x0120	; 0x800120 <PS2_keystatus>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:759
          {
          PS2_led_lock &= ~index;
     736:	80 95       	com	r24
     738:	89 23       	and	r24, r25
     73a:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <PS2_led_lock>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:760
          PS2_keystatus |= _BREAK;     // send as break
     73e:	20 68       	ori	r18, 0x80	; 128
     740:	20 93 20 01 	sts	0x0120, r18	; 0x800120 <PS2_keystatus>
set_lock():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:811

/* Build command to send lock status
    Assumes data is within range */
void set_lock( )
{
send_byte( PS2_KC_LOCK );        // send command
     744:	8d ee       	ldi	r24, 0xED	; 237
     746:	ba de       	rcall	.-652    	; 0x4bc <send_byte(unsigned char)>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:812
send_byte( PS2_KEY_IGNORE );     // wait ACK
     748:	8b eb       	ldi	r24, 0xBB	; 187
     74a:	b8 de       	rcall	.-656    	; 0x4bc <send_byte(unsigned char)>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:813
send_byte( PS2_led_lock );       // send data from internal variable
     74c:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <PS2_led_lock>
     750:	b5 de       	rcall	.-662    	; 0x4bc <send_byte(unsigned char)>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:814
if( ( send_byte( PS2_KEY_IGNORE ) ) ) // wait ACK
     752:	8b eb       	ldi	r24, 0xBB	; 187
     754:	b3 de       	rcall	.-666    	; 0x4bc <send_byte(unsigned char)>
     756:	89 2b       	or	r24, r25
     758:	09 f0       	breq	.+2      	; 0x75c <PS2KeyAdvanced::available() [clone .constprop.4]+0x14c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:815
  send_next( );              // if idle start transmission
     75a:	1c df       	rcall	.-456    	; 0x594 <send_next()>
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:795
          retdata = pgm_read_byte( &scroll_remap[ retdata - PS2_KEY_KP0 ] );
#else
          retdata = scroll_remap[ retdata - PS2_KEY_KP0 ];
#endif
  // Sort break code handling or ignore for all having processed the _SHIFT etc status
  if( ( PS2_keystatus & _BREAK ) && ( _mode & _NO_BREAKS ) )
     75c:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <PS2_keystatus>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:798
    return ( uint16_t )PS2_KEY_IGNORE;
  // Assign Function keys _mode
  if( ( retdata <= PS2_KEY_SPACE || retdata >= PS2_KEY_F1 ) && retdata != PS2_KEY_EUROPE2 )
     760:	9e 01       	movw	r18, r28
     762:	20 52       	subi	r18, 0x20	; 32
     764:	31 09       	sbc	r19, r1
     766:	21 34       	cpi	r18, 0x41	; 65
     768:	31 05       	cpc	r19, r1
     76a:	b8 f1       	brcs	.+110    	; 0x7da <PS2KeyAdvanced::available() [clone .constprop.4]+0x1ca>
     76c:	cb 38       	cpi	r28, 0x8B	; 139
     76e:	d1 05       	cpc	r29, r1
     770:	a1 f1       	breq	.+104    	; 0x7da <PS2KeyAdvanced::available() [clone .constprop.4]+0x1ca>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:799
    PS2_keystatus |= _FUNCTION;
     772:	81 60       	ori	r24, 0x01	; 1
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:801
  else
    PS2_keystatus &= ~_FUNCTION;
     774:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <PS2_keystatus>
     778:	a3 cf       	rjmp	.-186    	; 0x6c0 <PS2KeyAdvanced::available() [clone .constprop.4]+0xb0>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:746
        PS2_lockstate[ retdata ] = 1;
        switch( retdata )
          {
          case PS2_KEY_CAPS:   index = PS2_LOCK_CAPS;
                               // Set CAPS lock if not set before
                               if( PS2_keystatus & _CAPS )
     77a:	84 ff       	sbrs	r24, 4
     77c:	05 c0       	rjmp	.+10     	; 0x788 <PS2KeyAdvanced::available() [clone .constprop.4]+0x178>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:747
                                 PS2_keystatus &= ~_CAPS;
     77e:	8f 7e       	andi	r24, 0xEF	; 239
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:749
                               else
                                 PS2_keystatus |= _CAPS;
     780:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <PS2_keystatus>
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:744
      else
        {
        PS2_lockstate[ retdata ] = 1;
        switch( retdata )
          {
          case PS2_KEY_CAPS:   index = PS2_LOCK_CAPS;
     784:	84 e0       	ldi	r24, 0x04	; 4
     786:	d0 cf       	rjmp	.-96     	; 0x728 <PS2KeyAdvanced::available() [clone .constprop.4]+0x118>
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:749
                               // Set CAPS lock if not set before
                               if( PS2_keystatus & _CAPS )
                                 PS2_keystatus &= ~_CAPS;
                               else
                                 PS2_keystatus |= _CAPS;
     788:	80 61       	ori	r24, 0x10	; 16
     78a:	fa cf       	rjmp	.-12     	; 0x780 <PS2KeyAdvanced::available() [clone .constprop.4]+0x170>
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:751
                               break;
          case PS2_KEY_SCROLL: index = PS2_LOCK_SCROLL;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	cc cf       	rjmp	.-104    	; 0x728 <PS2KeyAdvanced::available() [clone .constprop.4]+0x118>
translate():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:763
          {
          PS2_led_lock &= ~index;
          PS2_keystatus |= _BREAK;     // send as break
          }
        else
          PS2_led_lock |= index;
     790:	89 2b       	or	r24, r25
     792:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <PS2_led_lock>
     796:	d6 cf       	rjmp	.-84     	; 0x744 <PS2KeyAdvanced::available() [clone .constprop.4]+0x134>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:769
        set_lock( );
        }
      }
    }
  else
    if( retdata >= PS2_KEY_L_SHIFT && retdata <= PS2_KEY_R_GUI )
     798:	36 97       	sbiw	r30, 0x06	; 6
     79a:	e8 30       	cpi	r30, 0x08	; 8
     79c:	f1 05       	cpc	r31, r1
     79e:	60 f4       	brcc	.+24     	; 0x7b8 <PS2KeyAdvanced::available() [clone .constprop.4]+0x1a8>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:772
      { // Update bits for _SHIFT, _CTRL, _ALT, _ALT GR, _GUI in status
#if defined( PS2_REQUIRES_PROGMEM )
      index = pgm_read_byte( &control_flags[ retdata - PS2_KEY_L_SHIFT ] );
     7a0:	e2 5a       	subi	r30, 0xA2	; 162
     7a2:	ff 4f       	sbci	r31, 0xFF	; 255
     7a4:	e4 91       	lpm	r30, Z
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:776
#else
      index = control_flags[ retdata - PS2_KEY_L_SHIFT ];
#endif
      if( PS2_keystatus & _BREAK )
     7a6:	87 ff       	sbrs	r24, 7
     7a8:	05 c0       	rjmp	.+10     	; 0x7b4 <PS2KeyAdvanced::available() [clone .constprop.4]+0x1a4>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:777
        PS2_keystatus &= ~index;
     7aa:	e0 95       	com	r30
     7ac:	e8 23       	and	r30, r24
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:783
      else
        // if already set ignore repeats if flag set
        if( ( PS2_keystatus & index ) && ( _mode & _NO_REPEATS ) )
          retdata = PS2_KEY_IGNORE; // ignore repeat _SHIFT, _CTRL, _ALT, _GUI
        else
          PS2_keystatus |= index;
     7ae:	e0 93 20 01 	sts	0x0120, r30	; 0x800120 <PS2_keystatus>
     7b2:	d4 cf       	rjmp	.-88     	; 0x75c <PS2KeyAdvanced::available() [clone .constprop.4]+0x14c>
     7b4:	e8 2b       	or	r30, r24
     7b6:	fb cf       	rjmp	.-10     	; 0x7ae <PS2KeyAdvanced::available() [clone .constprop.4]+0x19e>
     7b8:	fe 01       	movw	r30, r28
     7ba:	b0 97       	sbiw	r30, 0x20	; 32
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:787
      }
    else
      // Numeric keypad ONLY works in numlock state or when _SHIFT status
      if( retdata >= PS2_KEY_KP0 && retdata <=  PS2_KEY_KP_DOT )
     7bc:	eb 30       	cpi	r30, 0x0B	; 11
     7be:	f1 05       	cpc	r31, r1
     7c0:	68 f6       	brcc	.-102    	; 0x75c <PS2KeyAdvanced::available() [clone .constprop.4]+0x14c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:788
        if( !( PS2_led_lock & PS2_LOCK_NUM ) || ( PS2_keystatus & _SHIFT ) )
     7c2:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <PS2_led_lock>
     7c6:	91 ff       	sbrs	r25, 1
     7c8:	02 c0       	rjmp	.+4      	; 0x7ce <PS2KeyAdvanced::available() [clone .constprop.4]+0x1be>
     7ca:	86 ff       	sbrs	r24, 6
     7cc:	c7 cf       	rjmp	.-114    	; 0x75c <PS2KeyAdvanced::available() [clone .constprop.4]+0x14c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:790
#if defined( PS2_REQUIRES_PROGMEM )
          retdata = pgm_read_byte( &scroll_remap[ retdata - PS2_KEY_KP0 ] );
     7ce:	ed 5a       	subi	r30, 0xAD	; 173
     7d0:	ff 4f       	sbci	r31, 0xFF	; 255
     7d2:	e4 91       	lpm	r30, Z
     7d4:	ce 2f       	mov	r28, r30
     7d6:	d0 e0       	ldi	r29, 0x00	; 0
     7d8:	c1 cf       	rjmp	.-126    	; 0x75c <PS2KeyAdvanced::available() [clone .constprop.4]+0x14c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:801
    return ( uint16_t )PS2_KEY_IGNORE;
  // Assign Function keys _mode
  if( ( retdata <= PS2_KEY_SPACE || retdata >= PS2_KEY_F1 ) && retdata != PS2_KEY_EUROPE2 )
    PS2_keystatus |= _FUNCTION;
  else
    PS2_keystatus &= ~_FUNCTION;
     7da:	8e 7f       	andi	r24, 0xFE	; 254
     7dc:	cb cf       	rjmp	.-106    	; 0x774 <PS2KeyAdvanced::available() [clone .constprop.4]+0x164>
_ZN14PS2KeyAdvanced9availableEv.constprop.4():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:674
data = _rx_buffer[ index ] & 0xFF;
index = ( _rx_buffer[ index ] & 0xFF00 ) >> 8;

// Catch special case of PAUSE key
if( index & _E1_MODE )
  return  PS2_KEY_PAUSE + _FUNCTION;
     7de:	c6 e0       	ldi	r28, 0x06	; 6
     7e0:	d0 e0       	ldi	r29, 0x00	; 0
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:958
  if( key_available( ) )         // not check for more keys to process
    {
    data = translate( );         // get next translated key
    if( data == 0 )             // unless in buffer is empty
      break;
    if( ( data & 0xFF ) != PS2_KEY_IGNORE
     7e2:	ce 01       	movw	r24, r28
     7e4:	99 27       	eor	r25, r25
     7e6:	8b 3b       	cpi	r24, 0xBB	; 187
     7e8:	91 05       	cpc	r25, r1
     7ea:	09 f4       	brne	.+2      	; 0x7ee <PS2KeyAdvanced::available() [clone .constprop.4]+0x1de>
     7ec:	1d cf       	rjmp	.-454    	; 0x628 <PS2KeyAdvanced::available() [clone .constprop.4]+0x18>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:959
            && ( data & 0xFF ) > 0 )
     7ee:	89 2b       	or	r24, r25
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <PS2KeyAdvanced::available() [clone .constprop.4]+0x1e4>
     7f2:	1a cf       	rjmp	.-460    	; 0x628 <PS2KeyAdvanced::available() [clone .constprop.4]+0x18>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:961
      {
      idx = _key_head + 1;         // point to next space
     7f4:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <_key_head>
     7f8:	8f 5f       	subi	r24, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:962
      if( idx >= _KEY_BUFF_SIZE )  // loop to front if necessary
     7fa:	84 30       	cpi	r24, 0x04	; 4
     7fc:	0c f0       	brlt	.+2      	; 0x800 <PS2KeyAdvanced::available() [clone .constprop.4]+0x1f0>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:963
        idx = 0;
     7fe:	80 e0       	ldi	r24, 0x00	; 0
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:964
      _key_buffer[ idx ] = data; // save the data to out buffer
     800:	e8 2f       	mov	r30, r24
     802:	ee 0f       	add	r30, r30
     804:	ff 0b       	sbc	r31, r31
     806:	ed 5c       	subi	r30, 0xCD	; 205
     808:	fe 4f       	sbci	r31, 0xFE	; 254
     80a:	d1 83       	std	Z+1, r29	; 0x01
     80c:	c0 83       	st	Z, r28
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:965
      _key_head = idx;
     80e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <_key_head>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:966
      i++;                      // update count
     812:	1f 5f       	subi	r17, 0xFF	; 255
     814:	09 cf       	rjmp	.-494    	; 0x628 <PS2KeyAdvanced::available() [clone .constprop.4]+0x18>

00000816 <ps2interrupt()>:
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:218
/* The ISR for the external interrupt
   To receive 11 bits - start 8 data, ODD parity, stop
   To send data calls send_bit( )
   Interrupt every falling incoming clock edge from keyboard */
void ps2interrupt( void )
{
     816:	cf 92       	push	r12
     818:	df 92       	push	r13
     81a:	ef 92       	push	r14
     81c:	ff 92       	push	r15
     81e:	0f 93       	push	r16
     820:	1f 93       	push	r17
     822:	cf 93       	push	r28
     824:	df 93       	push	r29
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:224
// Workaround for ESP32 SILICON error see extra/Porting.md
#ifdef PS2_ONLY_CHANGE_IRQ
if( digitalRead( PS2_IrqPin ) )
   return;
#endif
if( _ps2mode & _TX_MODE )
     826:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     82a:	86 ff       	sbrs	r24, 6
     82c:	6f c0       	rjmp	.+222    	; 0x90c <ps2interrupt()+0xf6>
send_bit():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:414
   Also no clear pending interrupt function   */
void send_bit( void )
{
uint8_t val;

_bitcount++;               // Now point to next bit
     82e:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <_bitcount>
     832:	8f 5f       	subi	r24, 0xFF	; 255
     834:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <_bitcount>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:415
switch( _bitcount )
     838:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <_bitcount>
     83c:	8a 30       	cpi	r24, 0x0A	; 10
     83e:	48 f4       	brcc	.+18     	; 0x852 <ps2interrupt()+0x3c>
     840:	82 30       	cpi	r24, 0x02	; 2
     842:	90 f5       	brcc	.+100    	; 0x8a8 <ps2interrupt()+0x92>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:346
     844:	60 e0       	ldi	r22, 0x00	; 0
send_bit():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:415
     846:	81 30       	cpi	r24, 0x01	; 1
     848:	09 f4       	brne	.+2      	; 0x84c <ps2interrupt()+0x36>
     84a:	46 c0       	rjmp	.+140    	; 0x8d8 <ps2interrupt()+0xc2>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:309
                  }
              }
            _bitcount = 0;	            // end of byte
            break;
    default: // in case of weird error and end of byte reception re-sync
            _bitcount = 0;
     84c:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <_bitcount>
     850:	b1 c0       	rjmp	.+354    	; 0x9b4 <ps2interrupt()+0x19e>
send_bit():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:415
void send_bit( void )
{
uint8_t val;

_bitcount++;               // Now point to next bit
switch( _bitcount )
     852:	8b 30       	cpi	r24, 0x0B	; 11
     854:	09 f4       	brne	.+2      	; 0x858 <ps2interrupt()+0x42>
     856:	4b c0       	rjmp	.+150    	; 0x8ee <ps2interrupt()+0xd8>
     858:	d8 f1       	brcs	.+118    	; 0x8d0 <ps2interrupt()+0xba>
     85a:	8c 30       	cpi	r24, 0x0C	; 12
     85c:	b9 f7       	brne	.-18     	; 0x84c <ps2interrupt()+0x36>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:445
          break;
  case 11: // Stop bit write change to input pull up for high stop bit
          pininput( PS2_DataPin );
          break;
  case 12: // Acknowledge bit low we cannot do anything if high instead of low
          if( !( _now_send == PS2_KC_ECHO || _now_send == PS2_KC_RESEND ) )
     85e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <_now_send>
     862:	8e 3e       	cpi	r24, 0xEE	; 238
     864:	69 f0       	breq	.+26     	; 0x880 <ps2interrupt()+0x6a>
     866:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <_now_send>
     86a:	8e 3f       	cpi	r24, 0xFE	; 254
     86c:	49 f0       	breq	.+18     	; 0x880 <ps2interrupt()+0x6a>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:447
            {
            _last_sent = _now_send;   // save in case of resend request
     86e:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <_now_send>
     872:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <_last_sent>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:448
            _ps2mode |= _LAST_VALID;
     876:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     87a:	82 60       	ori	r24, 0x02	; 2
     87c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:451
            }
          // clear modes to receive again
          _ps2mode &= ~_TX_MODE;
     880:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     884:	8f 7b       	andi	r24, 0xBF	; 191
     886:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:452
          if( _tx_ready & _HANDSHAKE )      // If _HANDSHAKE done
     88a:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <_tx_ready>
     88e:	87 ff       	sbrs	r24, 7
     890:	39 c0       	rjmp	.+114    	; 0x904 <ps2interrupt()+0xee>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:453
            _tx_ready &= ~_HANDSHAKE;
     892:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <_tx_ready>
     896:	8f 77       	andi	r24, 0x7F	; 127
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:455
          else                              // else we finished a command
            _tx_ready &= ~_COMMAND;
     898:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <_tx_ready>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:456
          if( !( _ps2mode & _WAIT_RESPONSE ) )   //  if not wait response
     89c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     8a0:	84 fd       	sbrc	r24, 4
     8a2:	d4 cf       	rjmp	.-88     	; 0x84c <ps2interrupt()+0x36>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:303
                  {
                  // Set mode and status for next receive byte
                  _ps2mode &= ~( _E0_MODE + _E1_MODE + _WAIT_RESPONSE + _BREAK_KEY );
                  _bytes_expected = 0;
                  _ps2mode &= ~_PS2_BUSY;
                  send_next( );              // Check for more to send
     8a4:	77 de       	rcall	.-786    	; 0x594 <send_next()>
     8a6:	d2 cf       	rjmp	.-92     	; 0x84c <ps2interrupt()+0x36>
send_bit():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:432
  case 6:
  case 7:
  case 8:
  case 9:
          // Data bits
          val = _shiftdata & 0x01;   // get LSB
     8a8:	c0 91 7e 00 	lds	r28, 0x007E	; 0x80007e <_shiftdata>
     8ac:	c1 70       	andi	r28, 0x01	; 1
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:346
     8ae:	6c 2f       	mov	r22, r28
     8b0:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <PS2_DataPin>
     8b4:	a7 dd       	rcall	.-1202   	; 0x404 <_digitalWrite>
send_bit():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:434
          digitalWrite( PS2_DataPin, val ); // send start bit
          _parity += val;            // another one received ?
     8b6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <_parity>
     8ba:	c8 0f       	add	r28, r24
     8bc:	c0 93 7c 00 	sts	0x007C, r28	; 0x80007c <_parity>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:435
          _shiftdata >>= 1;          // right _SHIFT one place for next bit
     8c0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <_shiftdata>
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	95 95       	asr	r25
     8c8:	87 95       	ror	r24
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:258
    case 7:
    case 8:
    case 9: // Data bits
            _parity += val;          // another one received ?
            _shiftdata >>= 1;        // right _SHIFT one place for next bit
            _shiftdata |= ( val ) ? 0x80 : 0;    // or in MSbit
     8ca:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <_shiftdata>
     8ce:	72 c0       	rjmp	.+228    	; 0x9b4 <ps2interrupt()+0x19e>
send_bit():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:439
          _parity += val;            // another one received ?
          _shiftdata >>= 1;          // right _SHIFT one place for next bit
          break;
  case 10:
          // Parity - Send LSB if 1 = odd number of 1's so parity should be 0
          digitalWrite( PS2_DataPin, ( ~_parity & 1 ) );
     8d0:	60 91 7c 00 	lds	r22, 0x007C	; 0x80007c <_parity>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:346
     8d4:	60 95       	com	r22
     8d6:	61 70       	andi	r22, 0x01	; 1
     8d8:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <PS2_DataPin>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:312
            break;
    default: // in case of weird error and end of byte reception re-sync
            _bitcount = 0;
    }
  }
}
     8dc:	df 91       	pop	r29
     8de:	cf 91       	pop	r28
     8e0:	1f 91       	pop	r17
     8e2:	0f 91       	pop	r16
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:346
     8ec:	8b cd       	rjmp	.-1258   	; 0x404 <_digitalWrite>
send_bit():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:442
  case 10:
          // Parity - Send LSB if 1 = odd number of 1's so parity should be 0
          digitalWrite( PS2_DataPin, ( ~_parity & 1 ) );
          break;
  case 11: // Stop bit write change to input pull up for high stop bit
          pininput( PS2_DataPin );
     8ee:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <PS2_DataPin>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:312
            break;
    default: // in case of weird error and end of byte reception re-sync
            _bitcount = 0;
    }
  }
}
     8f2:	df 91       	pop	r29
     8f4:	cf 91       	pop	r28
     8f6:	1f 91       	pop	r17
     8f8:	0f 91       	pop	r16
     8fa:	ff 90       	pop	r15
     8fc:	ef 90       	pop	r14
     8fe:	df 90       	pop	r13
     900:	cf 90       	pop	r12
send_bit():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:442
  case 10:
          // Parity - Send LSB if 1 = odd number of 1's so parity should be 0
          digitalWrite( PS2_DataPin, ( ~_parity & 1 ) );
          break;
  case 11: // Stop bit write change to input pull up for high stop bit
          pininput( PS2_DataPin );
     902:	f3 cd       	rjmp	.-1050   	; 0x4ea <pininput(unsigned char)>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:455
          // clear modes to receive again
          _ps2mode &= ~_TX_MODE;
          if( _tx_ready & _HANDSHAKE )      // If _HANDSHAKE done
            _tx_ready &= ~_HANDSHAKE;
          else                              // else we finished a command
            _tx_ready &= ~_COMMAND;
     904:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <_tx_ready>
     908:	8e 7f       	andi	r24, 0xFE	; 254
     90a:	c6 cf       	rjmp	.-116    	; 0x898 <ps2interrupt()+0x82>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:232
  {
  static uint32_t prev_ms = 0;
  uint32_t now_ms;
  uint8_t val, ret;

  val = digitalRead( PS2_DataPin );
     90c:	80 91 98 00 	lds	r24, 0x0098	; 0x800098 <PS2_DataPin>
_digitalRead():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:235
#endif
}

uint8_t _digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     910:	87 ff       	sbrs	r24, 7
     912:	0e c0       	rjmp	.+28     	; 0x930 <ps2interrupt()+0x11a>
     914:	8f 77       	andi	r24, 0x7F	; 127
     916:	83 30       	cpi	r24, 0x03	; 3
     918:	09 f4       	brne	.+2      	; 0x91c <ps2interrupt()+0x106>
     91a:	55 c0       	rjmp	.+170    	; 0x9c6 <ps2interrupt()+0x1b0>
     91c:	81 30       	cpi	r24, 0x01	; 1
     91e:	09 f4       	brne	.+2      	; 0x922 <ps2interrupt()+0x10c>
     920:	54 c0       	rjmp	.+168    	; 0x9ca <ps2interrupt()+0x1b4>
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	09 f4       	brne	.+2      	; 0x928 <ps2interrupt()+0x112>
     926:	53 c0       	rjmp	.+166    	; 0x9ce <ps2interrupt()+0x1b8>
     928:	88 23       	and	r24, r24
     92a:	09 f4       	brne	.+2      	; 0x92e <ps2interrupt()+0x118>
     92c:	52 c0       	rjmp	.+164    	; 0x9d2 <ps2interrupt()+0x1bc>
_Z12ps2interruptv():
     92e:	8f ef       	ldi	r24, 0xFF	; 255
_digitalRead():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:248
  // "read" should *NEVER* change the behavior of the thing you're using it on.
  // That's why it's called "read" not "write". As an added bonus, sets the
  // stage for auto-fast-digitalRead() for compile time known pins.
  // if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  if (*portInputRegister(port) & bit) return HIGH;
     930:	96 b3       	in	r25, 0x16	; 22
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:237

uint8_t _digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
  //uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
     932:	c1 e0       	ldi	r28, 0x01	; 1
     934:	d0 e0       	ldi	r29, 0x00	; 0
     936:	01 c0       	rjmp	.+2      	; 0x93a <ps2interrupt()+0x124>
     938:	cc 0f       	add	r28, r28
     93a:	8a 95       	dec	r24
     93c:	ea f7       	brpl	.-6      	; 0x938 <ps2interrupt()+0x122>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:248
  // "read" should *NEVER* change the behavior of the thing you're using it on.
  // That's why it's called "read" not "write". As an added bonus, sets the
  // stage for auto-fast-digitalRead() for compile time known pins.
  // if (timer != NOT_ON_TIMER) turnOffPWM(timer);

  if (*portInputRegister(port) & bit) return HIGH;
     93e:	c9 23       	and	r28, r25
     940:	d1 e0       	ldi	r29, 0x01	; 1
     942:	09 f4       	brne	.+2      	; 0x946 <ps2interrupt()+0x130>
     944:	d0 e0       	ldi	r29, 0x00	; 0
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:234
  /* timeout catch for glitches reset everything */
  now_ms = millis( );
     946:	18 dd       	rcall	.-1488   	; 0x378 <millis>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:235
  if( now_ms - prev_ms > 250 )
     948:	00 91 77 00 	lds	r16, 0x0077	; 0x800077 <ps2interrupt()::prev_ms>
     94c:	10 91 78 00 	lds	r17, 0x0078	; 0x800078 <ps2interrupt()::prev_ms+0x1>
     950:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <ps2interrupt()::prev_ms+0x2>
     954:	30 91 7a 00 	lds	r19, 0x007A	; 0x80007a <ps2interrupt()::prev_ms+0x3>
     958:	6b 01       	movw	r12, r22
     95a:	7c 01       	movw	r14, r24
     95c:	c0 1a       	sub	r12, r16
     95e:	d1 0a       	sbc	r13, r17
     960:	e2 0a       	sbc	r14, r18
     962:	f3 0a       	sbc	r15, r19
     964:	97 01       	movw	r18, r14
     966:	86 01       	movw	r16, r12
     968:	0b 3f       	cpi	r16, 0xFB	; 251
     96a:	11 05       	cpc	r17, r1
     96c:	21 05       	cpc	r18, r1
     96e:	31 05       	cpc	r19, r1
     970:	20 f0       	brcs	.+8      	; 0x97a <ps2interrupt()+0x164>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:237
    {
    _bitcount = 0;
     972:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <_bitcount>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:238
    _shiftdata = 0;
     976:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <_shiftdata>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:240
    }
  prev_ms = now_ms;
     97a:	60 93 77 00 	sts	0x0077, r22	; 0x800077 <ps2interrupt()::prev_ms>
     97e:	70 93 78 00 	sts	0x0078, r23	; 0x800078 <ps2interrupt()::prev_ms+0x1>
     982:	80 93 79 00 	sts	0x0079, r24	; 0x800079 <ps2interrupt()::prev_ms+0x2>
     986:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <ps2interrupt()::prev_ms+0x3>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:241
  _bitcount++;             // Now point to next bit
     98a:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <_bitcount>
     98e:	8f 5f       	subi	r24, 0xFF	; 255
     990:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <_bitcount>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:242
  switch( _bitcount )
     994:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <_bitcount>
     998:	8a 30       	cpi	r24, 0x0A	; 10
     99a:	e8 f4       	brcc	.+58     	; 0x9d6 <ps2interrupt()+0x1c0>
     99c:	82 30       	cpi	r24, 0x02	; 2
     99e:	60 f5       	brcc	.+88     	; 0x9f8 <ps2interrupt()+0x1e2>
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <ps2interrupt()+0x190>
     9a4:	53 cf       	rjmp	.-346    	; 0x84c <ps2interrupt()+0x36>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:245
    {
    case 1: // Start bit
            _parity = 0;
     9a6:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <_parity>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:246
            _ps2mode |= _PS2_BUSY;    // set busy
     9aa:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     9ae:	80 68       	ori	r24, 0x80	; 128
     9b0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:312
            break;
    default: // in case of weird error and end of byte reception re-sync
            _bitcount = 0;
    }
  }
}
     9b4:	df 91       	pop	r29
     9b6:	cf 91       	pop	r28
     9b8:	1f 91       	pop	r17
     9ba:	0f 91       	pop	r16
     9bc:	ff 90       	pop	r15
     9be:	ef 90       	pop	r14
     9c0:	df 90       	pop	r13
     9c2:	cf 90       	pop	r12
     9c4:	08 95       	ret
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_digital.c:235
#endif
}

uint8_t _digitalRead(uint8_t pin)
{
  if (pin&128) {pin=analogInputToDigitalPin((pin&127));}
     9c6:	83 e0       	ldi	r24, 0x03	; 3
     9c8:	b3 cf       	rjmp	.-154    	; 0x930 <ps2interrupt()+0x11a>
     9ca:	82 e0       	ldi	r24, 0x02	; 2
     9cc:	b1 cf       	rjmp	.-158    	; 0x930 <ps2interrupt()+0x11a>
     9ce:	84 e0       	ldi	r24, 0x04	; 4
     9d0:	af cf       	rjmp	.-162    	; 0x930 <ps2interrupt()+0x11a>
     9d2:	85 e0       	ldi	r24, 0x05	; 5
     9d4:	ad cf       	rjmp	.-166    	; 0x930 <ps2interrupt()+0x11a>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:242
    _bitcount = 0;
    _shiftdata = 0;
    }
  prev_ms = now_ms;
  _bitcount++;             // Now point to next bit
  switch( _bitcount )
     9d6:	8a 30       	cpi	r24, 0x0A	; 10
     9d8:	11 f1       	breq	.+68     	; 0xa1e <ps2interrupt()+0x208>
     9da:	8b 30       	cpi	r24, 0x0B	; 11
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <ps2interrupt()+0x1ca>
     9de:	36 cf       	rjmp	.-404    	; 0x84c <ps2interrupt()+0x36>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:266
            _parity &= 1;            // Get LSB if 1 = odd number of 1's so parity bit should be 0
            if( _parity == val )     // Both same parity error
              _parity = 0xFD;        // To ensure at next bit count clear and discard
            break;
    case 11: // Stop bit lots of spare time now
            if( _parity >= 0xFD )    // had parity error
     9e0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <_parity>
     9e4:	8d 3f       	cpi	r24, 0xFD	; 253
     9e6:	40 f1       	brcs	.+80     	; 0xa38 <ps2interrupt()+0x222>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:268
              {
              send_now( PS2_KC_RESEND );    // request resend
     9e8:	8e ef       	ldi	r24, 0xFE	; 254
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:293
                  _head = val;
                  }
                }
              if( ret & 0x10 )              // Special command to send (ECHO/RESEND)
                {
                send_now( _now_send );
     9ea:	81 dd       	rcall	.-1278   	; 0x4ee <send_now(unsigned char)>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:294
                _tx_ready |= _HANDSHAKE;
     9ec:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <_tx_ready>
     9f0:	80 68       	ori	r24, 0x80	; 128
     9f2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <_tx_ready>
     9f6:	2a cf       	rjmp	.-428    	; 0x84c <ps2interrupt()+0x36>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:256
    case 5:
    case 6:
    case 7:
    case 8:
    case 9: // Data bits
            _parity += val;          // another one received ?
     9f8:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <_parity>
     9fc:	d8 0f       	add	r29, r24
     9fe:	d0 93 7c 00 	sts	0x007C, r29	; 0x80007c <_parity>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:257
            _shiftdata >>= 1;        // right _SHIFT one place for next bit
     a02:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <_shiftdata>
     a06:	90 e0       	ldi	r25, 0x00	; 0
     a08:	95 95       	asr	r25
     a0a:	87 95       	ror	r24
     a0c:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <_shiftdata>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:258
            _shiftdata |= ( val ) ? 0x80 : 0;    // or in MSbit
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	c1 11       	cpse	r28, r1
     a14:	90 e8       	ldi	r25, 0x80	; 128
     a16:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <_shiftdata>
     a1a:	89 2b       	or	r24, r25
     a1c:	56 cf       	rjmp	.-340    	; 0x8ca <ps2interrupt()+0xb4>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:261
            break;
    case 10: // Parity check
            _parity &= 1;            // Get LSB if 1 = odd number of 1's so parity bit should be 0
     a1e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <_parity>
     a22:	81 70       	andi	r24, 0x01	; 1
     a24:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <_parity>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:262
            if( _parity == val )     // Both same parity error
     a28:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <_parity>
     a2c:	8d 13       	cpse	r24, r29
     a2e:	c2 cf       	rjmp	.-124    	; 0x9b4 <ps2interrupt()+0x19e>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:263
              _parity = 0xFD;        // To ensure at next bit count clear and discard
     a30:	8d ef       	ldi	r24, 0xFD	; 253
     a32:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <_parity>
     a36:	be cf       	rjmp	.-132    	; 0x9b4 <ps2interrupt()+0x19e>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:274
              _tx_ready |= _HANDSHAKE;
              }
            else                    // Good so save byte in _rx_buffer
              {
              // Check _SHIFTed data for commands and action
              ret = decode_key( _shiftdata );
     a38:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <_shiftdata>
decode_key():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:333
uint8_t state;

state = 6;             // default state save and decrement

// Anything but resend received clear valid value to resend
if( value != PS2_KC_RESEND )
     a3c:	8e 3f       	cpi	r24, 0xFE	; 254
     a3e:	29 f0       	breq	.+10     	; 0xa4a <ps2interrupt()+0x234>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:334
  _ps2mode &= ~( _LAST_VALID );
     a40:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <_ps2mode>
     a44:	9d 7f       	andi	r25, 0xFD	; 253
     a46:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:337

// First check not a valid response code from a host command
if( _ps2mode & _WAIT_RESPONSE )
     a4a:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <_ps2mode>
     a4e:	94 ff       	sbrs	r25, 4
     a50:	02 c0       	rjmp	.+4      	; 0xa56 <ps2interrupt()+0x240>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:338
  if( value < 0xF0 )
     a52:	80 3f       	cpi	r24, 0xF0	; 240
     a54:	70 f0       	brcs	.+28     	; 0xa72 <ps2interrupt()+0x25c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:342
    return state;      // Save response and decrement

// E1 Pause mode  special case just decrement
if( _ps2mode & _E1_MODE )
     a56:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <_ps2mode>
     a5a:	92 fd       	sbrc	r25, 2
     a5c:	90 c0       	rjmp	.+288    	; 0xb7e <ps2interrupt()+0x368>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:345
  return 2;

switch( value )
     a5e:	8e 3e       	cpi	r24, 0xEE	; 238
     a60:	09 f4       	brne	.+2      	; 0xa64 <ps2interrupt()+0x24e>
     a62:	76 c0       	rjmp	.+236    	; 0xb50 <ps2interrupt()+0x33a>
     a64:	e8 f4       	brcc	.+58     	; 0xaa0 <ps2interrupt()+0x28a>
     a66:	8a 3a       	cpi	r24, 0xAA	; 170
     a68:	09 f4       	brne	.+2      	; 0xa6c <ps2interrupt()+0x256>
     a6a:	7e c0       	rjmp	.+252    	; 0xb68 <ps2interrupt()+0x352>
     a6c:	20 f4       	brcc	.+8      	; 0xa76 <ps2interrupt()+0x260>
     a6e:	88 23       	and	r24, r24
     a70:	59 f1       	breq	.+86     	; 0xac8 <ps2interrupt()+0x2b2>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:330
*/
uint8_t decode_key( uint8_t value )
{
uint8_t state;

state = 6;             // default state save and decrement
     a72:	86 e0       	ldi	r24, 0x06	; 6
     a74:	2b c0       	rjmp	.+86     	; 0xacc <ps2interrupt()+0x2b6>
decode_key():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:345

// E1 Pause mode  special case just decrement
if( _ps2mode & _E1_MODE )
  return 2;

switch( value )
     a76:	80 3e       	cpi	r24, 0xE0	; 224
     a78:	09 f4       	brne	.+2      	; 0xa7c <ps2interrupt()+0x266>
     a7a:	7a c0       	rjmp	.+244    	; 0xb70 <ps2interrupt()+0x35a>
     a7c:	81 3e       	cpi	r24, 0xE1	; 225
     a7e:	c9 f7       	brne	.-14     	; 0xa72 <ps2interrupt()+0x25c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:385
   case PS2_KC_BAT:     // BAT pass
                _bytes_expected = 0;         // reset as if in middle of something lost now
                state = 4;
                break;
   case PS2_KC_EXTEND1:   // Major extend code (PAUSE key only)
                if( !( _ps2mode & _E1_MODE ) )  // First E1 only
     a80:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     a84:	82 fd       	sbrc	r24, 2
     a86:	1a c0       	rjmp	.+52     	; 0xabc <ps2interrupt()+0x2a6>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:387
                  {
                  _bytes_expected = 7;       // seven more bytes
     a88:	87 e0       	ldi	r24, 0x07	; 7
     a8a:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <_bytes_expected>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:388
                  _ps2mode |= _E1_MODE;
     a8e:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     a92:	84 60       	ori	r24, 0x04	; 4
     a94:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:389
                  _ps2mode &= ~_BREAK_KEY;    // Always a make
     a98:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     a9c:	8f 7d       	andi	r24, 0xDF	; 223
     a9e:	0c c0       	rjmp	.+24     	; 0xab8 <ps2interrupt()+0x2a2>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:345

// E1 Pause mode  special case just decrement
if( _ps2mode & _E1_MODE )
  return 2;

switch( value )
     aa0:	8c 3f       	cpi	r24, 0xFC	; 252
     aa2:	09 f4       	brne	.+2      	; 0xaa6 <ps2interrupt()+0x290>
     aa4:	4d c0       	rjmp	.+154    	; 0xb40 <ps2interrupt()+0x32a>
     aa6:	60 f4       	brcc	.+24     	; 0xac0 <ps2interrupt()+0x2aa>
     aa8:	80 3f       	cpi	r24, 0xF0	; 240
     aaa:	19 f7       	brne	.-58     	; 0xa72 <ps2interrupt()+0x25c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:368
                _ps2mode = 0;
                _tx_ready = 0;
                state = 0xE;
                break;
   case PS2_KC_KEYBREAK:   // break Code - wait the final key byte
                _bytes_expected = 1;
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <_bytes_expected>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:369
                _ps2mode |= _BREAK_KEY;
     ab2:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     ab6:	80 62       	ori	r24, 0x20	; 32
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:395
                  }
                state = 0;
                break;
   case PS2_KC_EXTEND:   // Two byte Extend code
                _bytes_expected = 1;        // one more byte at least to wait for
                _ps2mode |= _E0_MODE;
     ab8:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <_ps2mode>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:359
                  {
                  _now_send = _last_sent;
                  state = 0x10;
                  }
                else
                  state = 0;
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	06 c0       	rjmp	.+12     	; 0xacc <ps2interrupt()+0x2b6>
decode_key():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:345

// E1 Pause mode  special case just decrement
if( _ps2mode & _E1_MODE )
  return 2;

switch( value )
     ac0:	8e 3f       	cpi	r24, 0xFE	; 254
     ac2:	a1 f1       	breq	.+104    	; 0xb2c <ps2interrupt()+0x316>
     ac4:	8f 3f       	cpi	r24, 0xFF	; 255
     ac6:	a9 f6       	brne	.-86     	; 0xa72 <ps2interrupt()+0x25c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:349
   {
   case 0:      // Buffer overrun Errors Reset modes and buffers
   case PS2_KC_OVERRUN:
                ps2_reset( );
     ac8:	e4 dc       	rcall	.-1592   	; 0x492 <ps2_reset()>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:350
                state = 0xC;
     aca:	8c e0       	ldi	r24, 0x0C	; 12
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:275
              }
            else                    // Good so save byte in _rx_buffer
              {
              // Check _SHIFTed data for commands and action
              ret = decode_key( _shiftdata );
              if( ret & 0x2 )       // decrement expected bytes
     acc:	81 ff       	sbrs	r24, 1
     ace:	05 c0       	rjmp	.+10     	; 0xada <ps2interrupt()+0x2c4>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:276
                _bytes_expected--;
     ad0:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <_bytes_expected>
     ad4:	91 50       	subi	r25, 0x01	; 1
     ad6:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <_bytes_expected>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:277
              if( _bytes_expected <= 0 || ret & 4 )   // Save value ??
     ada:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <_bytes_expected>
     ade:	19 16       	cp	r1, r25
     ae0:	14 f4       	brge	.+4      	; 0xae6 <ps2interrupt()+0x2d0>
     ae2:	82 ff       	sbrs	r24, 2
     ae4:	1e c0       	rjmp	.+60     	; 0xb22 <ps2interrupt()+0x30c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:279
                {
                val = _head + 1;
     ae6:	90 91 32 01 	lds	r25, 0x0132	; 0x800132 <_head>
     aea:	9f 5f       	subi	r25, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:280
                if( val >= _RX_BUFFER_SIZE )
     aec:	98 30       	cpi	r25, 0x08	; 8
     aee:	08 f0       	brcs	.+2      	; 0xaf2 <ps2interrupt()+0x2dc>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:281
                  val = 0;
     af0:	90 e0       	ldi	r25, 0x00	; 0
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:282
                if( val != _tail )
     af2:	20 91 31 01 	lds	r18, 0x0131	; 0x800131 <_tail>
     af6:	29 17       	cp	r18, r25
     af8:	a1 f0       	breq	.+40     	; 0xb22 <ps2interrupt()+0x30c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:285
                  {
                  // get last byte to save
                  _rx_buffer[ val ] = uint16_t( _shiftdata );
     afa:	20 91 7e 00 	lds	r18, 0x007E	; 0x80007e <_shiftdata>
     afe:	e9 2f       	mov	r30, r25
     b00:	f0 e0       	ldi	r31, 0x00	; 0
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	ee 0f       	add	r30, r30
     b06:	ff 1f       	adc	r31, r31
     b08:	ef 5d       	subi	r30, 0xDF	; 223
     b0a:	fe 4f       	sbci	r31, 0xFE	; 254
     b0c:	31 83       	std	Z+1, r19	; 0x01
     b0e:	20 83       	st	Z, r18
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:287
                  // save extra details
                  _rx_buffer[ val ] |= uint16_t( _ps2mode ) << 8;
     b10:	40 91 85 00 	lds	r20, 0x0085	; 0x800085 <_ps2mode>
     b14:	20 81       	ld	r18, Z
     b16:	31 81       	ldd	r19, Z+1	; 0x01
     b18:	34 2b       	or	r19, r20
     b1a:	31 83       	std	Z+1, r19	; 0x01
     b1c:	20 83       	st	Z, r18
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:288
                  _head = val;
     b1e:	90 93 32 01 	sts	0x0132, r25	; 0x800132 <_head>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:291
                  }
                }
              if( ret & 0x10 )              // Special command to send (ECHO/RESEND)
     b22:	80 71       	andi	r24, 0x10	; 16
     b24:	71 f1       	breq	.+92     	; 0xb82 <ps2interrupt()+0x36c>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:293
                {
                send_now( _now_send );
     b26:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <_now_send>
     b2a:	5f cf       	rjmp	.-322    	; 0x9ea <ps2interrupt()+0x1d4>
decode_key():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:353
   case PS2_KC_OVERRUN:
                ps2_reset( );
                state = 0xC;
                break;
   case PS2_KC_RESEND:   // Resend last byte if we have sent something
                if( ( _ps2mode & _LAST_VALID ) )
     b2c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     b30:	81 ff       	sbrs	r24, 1
     b32:	c4 cf       	rjmp	.-120    	; 0xabc <ps2interrupt()+0x2a6>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:355
                  {
                  _now_send = _last_sent;
     b34:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <_last_sent>
     b38:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <_now_send>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:356
                  state = 0x10;
     b3c:	80 e1       	ldi	r24, 0x10	; 16
     b3e:	c6 cf       	rjmp	.-116    	; 0xacc <ps2interrupt()+0x2b6>
decode_key():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:362
                  }
                else
                  state = 0;
                break;
   case PS2_KC_ERROR: // General error pass up but stop any sending or receiving
                _bytes_expected = 0;
     b40:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <_bytes_expected>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:363
                _ps2mode = 0;
     b44:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:364
                _tx_ready = 0;
     b48:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <_tx_ready>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:365
                state = 0xE;
     b4c:	8e e0       	ldi	r24, 0x0E	; 14
     b4e:	be cf       	rjmp	.-132    	; 0xacc <ps2interrupt()+0x2b6>
decode_key():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:374
                _ps2mode |= _BREAK_KEY;
                state = 0;
                break;
   case PS2_KC_ECHO:   // Echo if we did not originate echo back
                state = 4;                  // always save
                if( _ps2mode & _LAST_VALID && _last_sent != PS2_KC_ECHO )
     b50:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <_ps2mode>
     b54:	91 ff       	sbrs	r25, 1
     b56:	0a c0       	rjmp	.+20     	; 0xb6c <ps2interrupt()+0x356>
     b58:	90 91 76 00 	lds	r25, 0x0076	; 0x800076 <_last_sent>
     b5c:	9e 3e       	cpi	r25, 0xEE	; 238
     b5e:	31 f0       	breq	.+12     	; 0xb6c <ps2interrupt()+0x356>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:376
                  {
                  _now_send = PS2_KC_ECHO;
     b60:	80 93 7d 00 	sts	0x007D, r24	; 0x80007d <_now_send>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:377
                  state |= 0x10;            // send _command on exit
     b64:	84 e1       	ldi	r24, 0x14	; 20
     b66:	b2 cf       	rjmp	.-156    	; 0xacc <ps2interrupt()+0x2b6>
decode_key():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:381
                  }
                break;
   case PS2_KC_BAT:     // BAT pass
                _bytes_expected = 0;         // reset as if in middle of something lost now
     b68:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <_bytes_expected>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:373
                _bytes_expected = 1;
                _ps2mode |= _BREAK_KEY;
                state = 0;
                break;
   case PS2_KC_ECHO:   // Echo if we did not originate echo back
                state = 4;                  // always save
     b6c:	84 e0       	ldi	r24, 0x04	; 4
     b6e:	ae cf       	rjmp	.-164    	; 0xacc <ps2interrupt()+0x2b6>
decode_key():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:394
                  _ps2mode &= ~_BREAK_KEY;    // Always a make
                  }
                state = 0;
                break;
   case PS2_KC_EXTEND:   // Two byte Extend code
                _bytes_expected = 1;        // one more byte at least to wait for
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <_bytes_expected>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:395
                _ps2mode |= _E0_MODE;
     b76:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     b7a:	88 60       	ori	r24, 0x08	; 8
     b7c:	9d cf       	rjmp	.-198    	; 0xab8 <ps2interrupt()+0x2a2>
_Z12ps2interruptv():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:343
  if( value < 0xF0 )
    return state;      // Save response and decrement

// E1 Pause mode  special case just decrement
if( _ps2mode & _E1_MODE )
  return 2;
     b7e:	82 e0       	ldi	r24, 0x02	; 2
     b80:	a5 cf       	rjmp	.-182    	; 0xacc <ps2interrupt()+0x2b6>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:297
                {
                send_now( _now_send );
                _tx_ready |= _HANDSHAKE;
                }
              else
                if( _bytes_expected <= 0 )  // Receive data finished
     b82:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <_bytes_expected>
     b86:	18 16       	cp	r1, r24
     b88:	0c f4       	brge	.+2      	; 0xb8c <ps2interrupt()+0x376>
     b8a:	60 ce       	rjmp	.-832    	; 0x84c <ps2interrupt()+0x36>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:300
                  {
                  // Set mode and status for next receive byte
                  _ps2mode &= ~( _E0_MODE + _E1_MODE + _WAIT_RESPONSE + _BREAK_KEY );
     b8c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     b90:	83 7c       	andi	r24, 0xC3	; 195
     b92:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <_ps2mode>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:301
                  _bytes_expected = 0;
     b96:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <_bytes_expected>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:302
                  _ps2mode &= ~_PS2_BUSY;
     b9a:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <_ps2mode>
     b9e:	8f 77       	andi	r24, 0x7F	; 127
     ba0:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <_ps2mode>
     ba4:	7f ce       	rjmp	.-770    	; 0x8a4 <ps2interrupt()+0x8e>

00000ba6 <_write(unsigned char)>:
_Z6_writeh():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:149
  digitalWrite(xt_clk, HIGH) ; 
  digitalWrite(xt_data, HIGH) ; 
}

void _write(unsigned char value)
{ 
     ba6:	bf 92       	push	r11
     ba8:	cf 92       	push	r12
     baa:	df 92       	push	r13
     bac:	ef 92       	push	r14
     bae:	ff 92       	push	r15
     bb0:	0f 93       	push	r16
     bb2:	1f 93       	push	r17
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	cd b7       	in	r28, 0x3d	; 61
     bba:	de b7       	in	r29, 0x3e	; 62
     bbc:	28 97       	sbiw	r28, 0x08	; 8
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	f8 94       	cli
     bc2:	de bf       	out	0x3e, r29	; 62
     bc4:	0f be       	out	0x3f, r0	; 63
     bc6:	cd bf       	out	0x3d, r28	; 61
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:150
   while (digitalRead(xt_clk) != HIGH) ; 
     bc8:	b1 9b       	sbis	0x16, 1	; 22
     bca:	fe cf       	rjmp	.-4      	; 0xbc8 <_write(unsigned char)+0x22>
     bcc:	8e 01       	movw	r16, r28
     bce:	0f 5f       	subi	r16, 0xFF	; 255
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
     bd2:	f8 01       	movw	r30, r16
     bd4:	98 e0       	ldi	r25, 0x08	; 8
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:156
   unsigned char bits[8] ;
   byte p = 0 ; 
   byte j = 0 ;
   for (j=0 ; j < 8; j++)
   {
     if (value & 1) bits[j] = 1 ;
     bd6:	41 e0       	ldi	r20, 0x01	; 1
     bd8:	28 2f       	mov	r18, r24
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	80 ff       	sbrs	r24, 0
     bde:	4a c0       	rjmp	.+148    	; 0xc74 <_write(unsigned char)+0xce>
     be0:	40 83       	st	Z, r20
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:158
     else bits[j] = 0 ; 
     value = value >> 1 ; 
     be2:	35 95       	asr	r19
     be4:	27 95       	ror	r18
     be6:	82 2f       	mov	r24, r18
     be8:	91 50       	subi	r25, 0x01	; 1
     bea:	31 96       	adiw	r30, 0x01	; 1
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:154
{ 
   while (digitalRead(xt_clk) != HIGH) ; 
   unsigned char bits[8] ;
   byte p = 0 ; 
   byte j = 0 ;
   for (j=0 ; j < 8; j++)
     bec:	91 11       	cpse	r25, r1
     bee:	f4 cf       	rjmp	.-24     	; 0xbd8 <_write(unsigned char)+0x32>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:341
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
      return;
    }
    else // Can only be LOW here, no need to check
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) &= ~digitalPinToBitMask(pin)));
     bf0:	c1 98       	cbi	0x18, 1	; 24
_turnOffPWM():
     bf2:	f1 db       	rcall	.-2078   	; 0x3d6 <_turnOffPWM.part.1>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:336
      #endif
    }

    if(val == HIGH)
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
     bf4:	c0 9a       	sbi	0x18, 0	; 24
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065
     bf6:	8c ee       	ldi	r24, 0xEC	; 236
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <_write(unsigned char)+0x54>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:336
     bfe:	c1 9a       	sbi	0x18, 1	; 24
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065
     c00:	80 e8       	ldi	r24, 0x80	; 128
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	01 97       	sbiw	r24, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <_write(unsigned char)+0x5e>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:341
      return;
    }
    else // Can only be LOW here, no need to check
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) &= ~digitalPinToBitMask(pin)));
     c08:	c1 98       	cbi	0x18, 1	; 24
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065
     c0a:	88 e3       	ldi	r24, 0x38	; 56
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	01 97       	sbiw	r24, 0x01	; 1
     c10:	f1 f7       	brne	.-4      	; 0xc0e <_write(unsigned char)+0x68>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:336
      #endif
    }

    if(val == HIGH)
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
     c12:	c1 9a       	sbi	0x18, 1	; 24
     c14:	78 01       	movw	r14, r16
     c16:	88 e0       	ldi	r24, 0x08	; 8
     c18:	e8 0e       	add	r14, r24
     c1a:	f1 1c       	adc	r15, r1
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065
     c1c:	8a eb       	ldi	r24, 0xBA	; 186
     c1e:	c8 2e       	mov	r12, r24
     c20:	d1 2c       	mov	r13, r1
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:336
     c22:	c1 9a       	sbi	0x18, 1	; 24
_Z6_writeh():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:172
   digitalWrite(xt_clk, HIGH) ; 
   byte i = 0 ; 
   for (i=0; i < 8; i++)
   {
      digitalWrite(xt_clk, HIGH) ; 
      digitalWrite(xt_data, bits[p]) ; 
     c24:	f8 01       	movw	r30, r16
     c26:	b1 90       	ld	r11, Z+
     c28:	8f 01       	movw	r16, r30
_turnOffPWM():
     c2a:	d5 db       	rcall	.-2134   	; 0x3d6 <_turnOffPWM.part.1>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:334
        _digitalWrite(pin,val);
        return;
      #endif
    }

    if(val == HIGH)
     c2c:	f1 e0       	ldi	r31, 0x01	; 1
     c2e:	bf 12       	cpse	r11, r31
     c30:	23 c0       	rjmp	.+70     	; 0xc78 <_write(unsigned char)+0xd2>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:336
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
     c32:	c0 9a       	sbi	0x18, 0	; 24
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065
     c34:	c6 01       	movw	r24, r12
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <_write(unsigned char)+0x90>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:341
      return;
    }
    else // Can only be LOW here, no need to check
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) &= ~digitalPinToBitMask(pin)));
     c3a:	c1 98       	cbi	0x18, 1	; 24
_turnOffPWM():
     c3c:	cc db       	rcall	.-2152   	; 0x3d6 <_turnOffPWM.part.1>
digitalWrite():
     c3e:	c0 98       	cbi	0x18, 0	; 24
_Z6_writeh():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:169
   delayMicroseconds(66) ;
   digitalWrite(xt_clk, LOW) ; 
   delayMicroseconds(30) ;
   digitalWrite(xt_clk, HIGH) ; 
   byte i = 0 ; 
   for (i=0; i < 8; i++)
     c40:	e0 16       	cp	r14, r16
     c42:	f1 06       	cpc	r15, r17
     c44:	71 f7       	brne	.-36     	; 0xc22 <_write(unsigned char)+0x7c>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:336
      #endif
    }

    if(val == HIGH)
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
     c46:	c1 9a       	sbi	0x18, 1	; 24
_turnOffPWM():
     c48:	c6 db       	rcall	.-2164   	; 0x3d6 <_turnOffPWM.part.1>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:341
      return;
    }
    else // Can only be LOW here, no need to check
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) &= ~digitalPinToBitMask(pin)));
     c4a:	c0 98       	cbi	0x18, 0	; 24
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065
     c4c:	8c ec       	ldi	r24, 0xCC	; 204
     c4e:	97 e0       	ldi	r25, 0x07	; 7
     c50:	01 97       	sbiw	r24, 0x01	; 1
     c52:	f1 f7       	brne	.-4      	; 0xc50 <_write(unsigned char)+0xaa>
_Z6_writeh():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:181
      p++ ; 
   } 
   digitalWrite(xt_clk, HIGH) ; 
   digitalWrite(xt_data, LOW) ;  
   delay(1) ;
}
     c54:	28 96       	adiw	r28, 0x08	; 8
     c56:	0f b6       	in	r0, 0x3f	; 63
     c58:	f8 94       	cli
     c5a:	de bf       	out	0x3e, r29	; 62
     c5c:	0f be       	out	0x3f, r0	; 63
     c5e:	cd bf       	out	0x3d, r28	; 61
     c60:	df 91       	pop	r29
     c62:	cf 91       	pop	r28
     c64:	1f 91       	pop	r17
     c66:	0f 91       	pop	r16
     c68:	ff 90       	pop	r15
     c6a:	ef 90       	pop	r14
     c6c:	df 90       	pop	r13
     c6e:	cf 90       	pop	r12
     c70:	bf 90       	pop	r11
     c72:	08 95       	ret
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:157
   byte p = 0 ; 
   byte j = 0 ;
   for (j=0 ; j < 8; j++)
   {
     if (value & 1) bits[j] = 1 ;
     else bits[j] = 0 ; 
     c74:	10 82       	st	Z, r1
     c76:	b5 cf       	rjmp	.-150    	; 0xbe2 <_write(unsigned char)+0x3c>
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:341
     c78:	c0 98       	cbi	0x18, 0	; 24
     c7a:	dc cf       	rjmp	.-72     	; 0xc34 <_write(unsigned char)+0x8e>

00000c7c <__vector_1>:
__vector_1():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:139
  }
}

#if NUMBER_EXTERNAL_INTERRUPTS >= 1
ISR(EXTERNAL_INTERRUPT_0_vect)
{
     c7c:	1f 92       	push	r1
     c7e:	0f 92       	push	r0
     c80:	0f b6       	in	r0, 0x3f	; 63
     c82:	0f 92       	push	r0
     c84:	11 24       	eor	r1, r1
     c86:	2f 93       	push	r18
     c88:	3f 93       	push	r19
     c8a:	4f 93       	push	r20
     c8c:	5f 93       	push	r21
     c8e:	6f 93       	push	r22
     c90:	7f 93       	push	r23
     c92:	8f 93       	push	r24
     c94:	9f 93       	push	r25
     c96:	af 93       	push	r26
     c98:	bf 93       	push	r27
     c9a:	ef 93       	push	r30
     c9c:	ff 93       	push	r31
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:140
  if(intFunc[EXTERNAL_INTERRUPT_0])
     c9e:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <intFunc>
     ca2:	90 91 3e 01 	lds	r25, 0x013E	; 0x80013e <intFunc+0x1>
     ca6:	89 2b       	or	r24, r25
     ca8:	29 f0       	breq	.+10     	; 0xcb4 <__vector_1+0x38>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:141
    intFunc[EXTERNAL_INTERRUPT_0]();
     caa:	e0 91 3d 01 	lds	r30, 0x013D	; 0x80013d <intFunc>
     cae:	f0 91 3e 01 	lds	r31, 0x013E	; 0x80013e <intFunc+0x1>
     cb2:	09 95       	icall
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/WInterrupts.c:142
}
     cb4:	ff 91       	pop	r31
     cb6:	ef 91       	pop	r30
     cb8:	bf 91       	pop	r27
     cba:	af 91       	pop	r26
     cbc:	9f 91       	pop	r25
     cbe:	8f 91       	pop	r24
     cc0:	7f 91       	pop	r23
     cc2:	6f 91       	pop	r22
     cc4:	5f 91       	pop	r21
     cc6:	4f 91       	pop	r20
     cc8:	3f 91       	pop	r19
     cca:	2f 91       	pop	r18
     ccc:	0f 90       	pop	r0
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	0f 90       	pop	r0
     cd2:	1f 90       	pop	r1
     cd4:	18 95       	reti

00000cd6 <__vector_7>:
__vector_7():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:90
//rename the vector so we can use it.
  #define ANALOG_COMP_vect ANA_COMP_vect
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
     cd6:	1f 92       	push	r1
     cd8:	0f 92       	push	r0
     cda:	0f b6       	in	r0, 0x3f	; 63
     cdc:	0f 92       	push	r0
     cde:	11 24       	eor	r1, r1
     ce0:	2f 93       	push	r18
     ce2:	3f 93       	push	r19
     ce4:	4f 93       	push	r20
     ce6:	5f 93       	push	r21
     ce8:	7f 93       	push	r23
     cea:	8f 93       	push	r24
     cec:	9f 93       	push	r25
     cee:	af 93       	push	r26
     cf0:	bf 93       	push	r27
     cf2:	ef 93       	push	r30
     cf4:	ff 93       	push	r31
getch():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:70
      [mask] "r" (Serial._rxmask)
    :
      "r23",
      "r24",
      "r25"
    );
     cf6:	40 91 6f 01 	lds	r20, 0x016F	; 0x80016f <Serial+0xc>
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	38 e0       	ldi	r19, 0x08	; 8
     cfe:	35 d0       	rcall	.+106    	; 0xd6a <uartDelay>
     d00:	34 d0       	rcall	.+104    	; 0xd6a <uartDelay>
     d02:	33 d0       	rcall	.+102    	; 0xd6a <uartDelay>
     d04:	32 d0       	rcall	.+100    	; 0xd6a <uartDelay>
     d06:	31 d0       	rcall	.+98     	; 0xd6a <uartDelay>
     d08:	88 94       	clc
     d0a:	76 b3       	in	r23, 0x16	; 22
     d0c:	74 23       	and	r23, r20
     d0e:	09 f0       	breq	.+2      	; 0xd12 <__vector_7+0x3c>
     d10:	08 94       	sec
     d12:	27 95       	ror	r18
     d14:	3a 95       	dec	r19
     d16:	09 f0       	breq	.+2      	; 0xd1a <__vector_7+0x44>
     d18:	f3 cf       	rjmp	.-26     	; 0xd00 <__vector_7+0x2a>
     d1a:	27 d0       	rcall	.+78     	; 0xd6a <uartDelay>
     d1c:	26 d0       	rcall	.+76     	; 0xd6a <uartDelay>
__vector_7():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:92
#elif !defined (ANALOG_COMP_vect)
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
     d1e:	e0 91 72 01 	lds	r30, 0x0172	; 0x800172 <Serial+0xf>
     d22:	f0 91 73 01 	lds	r31, 0x0173	; 0x800173 <Serial+0x10>
store_char():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:167
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
}

void store_char(unsigned char c, soft_ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     d26:	80 a1       	ldd	r24, Z+32	; 0x20
     d28:	91 a1       	ldd	r25, Z+33	; 0x21
     d2a:	01 96       	adiw	r24, 0x01	; 1
     d2c:	8f 71       	andi	r24, 0x1F	; 31
     d2e:	99 27       	eor	r25, r25
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:173

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     d30:	42 a1       	ldd	r20, Z+34	; 0x22
     d32:	53 a1       	ldd	r21, Z+35	; 0x23
     d34:	84 17       	cp	r24, r20
     d36:	95 07       	cpc	r25, r21
     d38:	39 f0       	breq	.+14     	; 0xd48 <__vector_7+0x72>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:174
    buffer->buffer[buffer->head] = c;
     d3a:	a0 a1       	ldd	r26, Z+32	; 0x20
     d3c:	b1 a1       	ldd	r27, Z+33	; 0x21
     d3e:	ae 0f       	add	r26, r30
     d40:	bf 1f       	adc	r27, r31
     d42:	2c 93       	st	X, r18
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:175
    buffer->head = i;
     d44:	91 a3       	std	Z+33, r25	; 0x21
     d46:	80 a3       	std	Z+32, r24	; 0x20
__vector_7():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:93
  #error Tiny Software Serial cannot find the Analog comparator interrupt vector!
#endif
ISR(ANALOG_COMP_vect){
  char ch = getch(); //read in the character softwarily - I know its not a word, but it sounded cool, so you know what: #define softwarily 1
  store_char(ch, Serial._rx_buffer);
  sbi(ACSR,ACI); //clear the flag.
     d48:	44 9a       	sbi	0x08, 4	; 8
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:94
}
     d4a:	ff 91       	pop	r31
     d4c:	ef 91       	pop	r30
     d4e:	bf 91       	pop	r27
     d50:	af 91       	pop	r26
     d52:	9f 91       	pop	r25
     d54:	8f 91       	pop	r24
     d56:	7f 91       	pop	r23
     d58:	5f 91       	pop	r21
     d5a:	4f 91       	pop	r20
     d5c:	3f 91       	pop	r19
     d5e:	2f 91       	pop	r18
     d60:	0f 90       	pop	r0
     d62:	0f be       	out	0x3f, r0	; 63
     d64:	0f 90       	pop	r0
     d66:	1f 90       	pop	r1
     d68:	18 95       	reti

00000d6a <uartDelay>:
uartDelay():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/TinySoftwareSerial.cpp:81
    "mov r25,%[count]\n"
    "1:dec r25\n"
      "brne 1b\n"
      "ret\n"
    ::[count] "r" ((uint8_t)Serial._delayCount)
  );
     d6a:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <Serial+0x11>
     d6e:	98 2f       	mov	r25, r24
     d70:	9a 95       	dec	r25
     d72:	f1 f7       	brne	.-4      	; 0xd70 <uartDelay+0x6>
     d74:	08 95       	ret

00000d76 <__vector_5>:
__vector_5():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/pins_arduino.c:91

#if !(defined(NO_MILLIS) && NO_MILLIS) && defined(USE_NEW_MILLIS) && USE_NEW_MILLIS
extern volatile MillisMicrosTime_t ovrf;
 
ISR(TIM0_OVF_vect)
{
     d76:	1f 92       	push	r1
     d78:	0f 92       	push	r0
     d7a:	0f b6       	in	r0, 0x3f	; 63
     d7c:	0f 92       	push	r0
     d7e:	11 24       	eor	r1, r1
     d80:	8f 93       	push	r24
     d82:	9f 93       	push	r25
     d84:	af 93       	push	r26
     d86:	bf 93       	push	r27
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/pins_arduino.c:92
  ovrf++; //Increment counter every 256 clock cycles  
     d88:	80 91 93 00 	lds	r24, 0x0093	; 0x800093 <ovrf>
     d8c:	90 91 94 00 	lds	r25, 0x0094	; 0x800094 <ovrf+0x1>
     d90:	a0 91 95 00 	lds	r26, 0x0095	; 0x800095 <ovrf+0x2>
     d94:	b0 91 96 00 	lds	r27, 0x0096	; 0x800096 <ovrf+0x3>
     d98:	01 96       	adiw	r24, 0x01	; 1
     d9a:	a1 1d       	adc	r26, r1
     d9c:	b1 1d       	adc	r27, r1
     d9e:	80 93 93 00 	sts	0x0093, r24	; 0x800093 <ovrf>
     da2:	90 93 94 00 	sts	0x0094, r25	; 0x800094 <ovrf+0x1>
     da6:	a0 93 95 00 	sts	0x0095, r26	; 0x800095 <ovrf+0x2>
     daa:	b0 93 96 00 	sts	0x0096, r27	; 0x800096 <ovrf+0x3>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/pins_arduino.c:93
}
     dae:	bf 91       	pop	r27
     db0:	af 91       	pop	r26
     db2:	9f 91       	pop	r25
     db4:	8f 91       	pop	r24
     db6:	0f 90       	pop	r0
     db8:	0f be       	out	0x3f, r0	; 63
     dba:	0f 90       	pop	r0
     dbc:	1f 90       	pop	r1
     dbe:	18 95       	reti

00000dc0 <__vector_4>:
__vector_4():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/Tone.cpp:110
  // tone() by treating it as a new pin
  CurrentTonePin      = 255;
}

ISR(TIMER1_OVF_vect) 
{  
     dc0:	1f 92       	push	r1
     dc2:	0f 92       	push	r0
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	0f 92       	push	r0
     dc8:	11 24       	eor	r1, r1
     dca:	cf 92       	push	r12
     dcc:	df 92       	push	r13
     dce:	ef 92       	push	r14
     dd0:	ff 92       	push	r15
     dd2:	0f 93       	push	r16
     dd4:	1f 93       	push	r17
     dd6:	2f 93       	push	r18
     dd8:	3f 93       	push	r19
     dda:	4f 93       	push	r20
     ddc:	5f 93       	push	r21
     dde:	6f 93       	push	r22
     de0:	7f 93       	push	r23
     de2:	8f 93       	push	r24
     de4:	9f 93       	push	r25
     de6:	af 93       	push	r26
     de8:	bf 93       	push	r27
     dea:	ef 93       	push	r30
     dec:	ff 93       	push	r31
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/Tone.cpp:113
  // Toggle the pin, most AVR can toggle an output pin by writing a 1 to the input 
  // register bit for that pin.
  *(portInputRegister(digitalPinToPort(CurrentTonePin))) = digitalPinToBitMask(CurrentTonePin);
     dee:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     df2:	81 e0       	ldi	r24, 0x01	; 1
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <__vector_4+0x3a>
     df8:	88 0f       	add	r24, r24
     dfa:	2a 95       	dec	r18
     dfc:	ea f7       	brpl	.-6      	; 0xdf8 <__vector_4+0x38>
     dfe:	86 bb       	out	0x16, r24	; 22
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/Tone.cpp:116
  
  // If we have played this tone for the requested duration, stop playing it.
  if (millis() - CurrentToneStarted >= CurrentToneDuration)
     e00:	bb da       	rcall	.-2698   	; 0x378 <millis>
     e02:	c0 90 8f 00 	lds	r12, 0x008F	; 0x80008f <CurrentToneStarted>
     e06:	d0 90 90 00 	lds	r13, 0x0090	; 0x800090 <CurrentToneStarted+0x1>
     e0a:	e0 90 91 00 	lds	r14, 0x0091	; 0x800091 <CurrentToneStarted+0x2>
     e0e:	f0 90 92 00 	lds	r15, 0x0092	; 0x800092 <CurrentToneStarted+0x3>
     e12:	00 91 8b 00 	lds	r16, 0x008B	; 0x80008b <CurrentToneDuration>
     e16:	10 91 8c 00 	lds	r17, 0x008C	; 0x80008c <CurrentToneDuration+0x1>
     e1a:	20 91 8d 00 	lds	r18, 0x008D	; 0x80008d <CurrentToneDuration+0x2>
     e1e:	30 91 8e 00 	lds	r19, 0x008E	; 0x80008e <CurrentToneDuration+0x3>
     e22:	6c 19       	sub	r22, r12
     e24:	7d 09       	sbc	r23, r13
     e26:	8e 09       	sbc	r24, r14
     e28:	9f 09       	sbc	r25, r15
     e2a:	60 17       	cp	r22, r16
     e2c:	71 07       	cpc	r23, r17
     e2e:	82 07       	cpc	r24, r18
     e30:	93 07       	cpc	r25, r19
     e32:	58 f0       	brcs	.+22     	; 0xe4a <__vector_4+0x8a>
_noTone():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/Tone.cpp:99
void _noTone(uint8_t pin) 
{
  // Disable the interrupt
  //  Note we can leave the rest of the timer setup as is, turnOnPWM() will
  //  fix it for itself next time you analogWrite() if you need to.
  TIMSK   &= ~_BV(TOIE1);
     e34:	89 b7       	in	r24, 0x39	; 57
     e36:	8b 7f       	andi	r24, 0xFB	; 251
     e38:	89 bf       	out	0x39, r24	; 57
pinMode():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:255
      return;
    }
    #if OPTIMIZE_CONSTANT_PINMODE_INPUT
    else if(mode == INPUT)
    {
      uint8_t oldSREG = SREG;
     e3a:	8f b7       	in	r24, 0x3f	; 63
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:256
      cli();
     e3c:	f8 94       	cli
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:257
      ((void)(*((volatile uint8_t *)portModeRegister(digitalPinToPort(pin)))   &= ~digitalPinToBitMask(pin)));
     e3e:	b8 98       	cbi	0x17, 0	; 23
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:258
      ((void)(*((volatile uint8_t *)pullupEnableRegister(digitalPinToPort(pin))) &= ~digitalPinToBitMask(pin)));    
     e40:	c0 98       	cbi	0x18, 0	; 24
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:259
      SREG = oldSREG;
     e42:	8f bf       	out	0x3f, r24	; 63
_noTone():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/Tone.cpp:106
  // Pin goes back to input state  
  pinMode(pin == 255 ? CurrentTonePin : pin, INPUT);
  
  // And make sure we will reset it to output state next time you call
  // tone() by treating it as a new pin
  CurrentTonePin      = 255;
     e44:	8f ef       	ldi	r24, 0xFF	; 255
     e46:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
__vector_4():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\variants\tinyX5/Tone.cpp:120
  // If we have played this tone for the requested duration, stop playing it.
  if (millis() - CurrentToneStarted >= CurrentToneDuration)
  {
    _noTone(); 
  }
}
     e4a:	ff 91       	pop	r31
     e4c:	ef 91       	pop	r30
     e4e:	bf 91       	pop	r27
     e50:	af 91       	pop	r26
     e52:	9f 91       	pop	r25
     e54:	8f 91       	pop	r24
     e56:	7f 91       	pop	r23
     e58:	6f 91       	pop	r22
     e5a:	5f 91       	pop	r21
     e5c:	4f 91       	pop	r20
     e5e:	3f 91       	pop	r19
     e60:	2f 91       	pop	r18
     e62:	1f 91       	pop	r17
     e64:	0f 91       	pop	r16
     e66:	ff 90       	pop	r15
     e68:	ef 90       	pop	r14
     e6a:	df 90       	pop	r13
     e6c:	cf 90       	pop	r12
     e6e:	0f 90       	pop	r0
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	0f 90       	pop	r0
     e74:	1f 90       	pop	r1
     e76:	18 95       	reti

00000e78 <global constructors keyed to 65535_0_XT_KEYBOARD.ino.cpp.o.2056>:
_GLOBAL__I_65535_0_XT_KEYBOARD.ino.cpp.o.2056():
     e78:	e3 e6       	ldi	r30, 0x63	; 99
     e7a:	f1 e0       	ldi	r31, 0x01	; 1
     e7c:	13 82       	std	Z+3, r1	; 0x03
     e7e:	12 82       	std	Z+2, r1	; 0x02
     e80:	88 ee       	ldi	r24, 0xE8	; 232
     e82:	93 e0       	ldi	r25, 0x03	; 3
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	84 83       	std	Z+4, r24	; 0x04
     e8a:	95 83       	std	Z+5, r25	; 0x05
     e8c:	a6 83       	std	Z+6, r26	; 0x06
     e8e:	b7 83       	std	Z+7, r27	; 0x07
     e90:	85 e6       	ldi	r24, 0x65	; 101
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	91 83       	std	Z+1, r25	; 0x01
     e96:	80 83       	st	Z, r24
     e98:	8f e3       	ldi	r24, 0x3F	; 63
     e9a:	91 e0       	ldi	r25, 0x01	; 1
     e9c:	90 8b       	std	Z+16, r25	; 0x10
     e9e:	87 87       	std	Z+15, r24	; 0x0f
     ea0:	82 e0       	ldi	r24, 0x02	; 2
     ea2:	84 87       	std	Z+12, r24	; 0x0c
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	85 87       	std	Z+13, r24	; 0x0d
     ea8:	8e ef       	ldi	r24, 0xFE	; 254
     eaa:	86 87       	std	Z+14, r24	; 0x0e
     eac:	11 8a       	std	Z+17, r1	; 0x11
     eae:	08 95       	ret

00000eb0 <main>:
main():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_lite.c:280
  TCCR0B |= _BV(CS00);
  TCCR0A |= _BV(WGM00)|_BV(WGM01);
  TIMSK0 |= 2;
  TCNT0=0;   
  #else
    turnOnMillis(MILLIS_TIMER_PRESCALE);
     eb0:	8a b5       	in	r24, 0x2a	; 42
     eb2:	83 60       	ori	r24, 0x03	; 3
     eb4:	8a bd       	out	0x2a, r24	; 42
     eb6:	89 b7       	in	r24, 0x39	; 57
     eb8:	82 60       	ori	r24, 0x02	; 2
     eba:	89 bf       	out	0x39, r24	; 57
     ebc:	83 b7       	in	r24, 0x33	; 51
     ebe:	82 60       	ori	r24, 0x02	; 2
     ec0:	83 bf       	out	0x33, r24	; 51
     ec2:	12 be       	out	0x32, r1	; 50
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_lite.c:282
  #endif
  sei();
     ec4:	78 94       	sei
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/wiring_lite.c:328
      #define ADC_ARDUINO_PRESCALER 7
    #endif
    
    // Since this is init(), ADCSRA is already going to be zero, we can just
    // set our bits indiscriminantly
    ADCSRA = (ADC_ARDUINO_PRESCALER << ADPS0) | _BV(ADEN);
     ec6:	86 e8       	ldi	r24, 0x86	; 134
     ec8:	86 b9       	out	0x06, r24	; 6
     eca:	e9 e9       	ldi	r30, 0x99	; 153
     ecc:	f0 e0       	ldi	r31, 0x00	; 0
setupTable():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:36
#endif


void setupTable () {
  for (int i=0;i<256;i++) {
    translationTable[i]=0xff;  
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	81 93       	st	Z+, r24
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:35

#endif


void setupTable () {
  for (int i=0;i<256;i++) {
     ed2:	91 e0       	ldi	r25, 0x01	; 1
     ed4:	e9 39       	cpi	r30, 0x99	; 153
     ed6:	f9 07       	cpc	r31, r25
     ed8:	d9 f7       	brne	.-10     	; 0xed0 <main+0x20>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:39
    translationTable[i]=0xff;  
  }
  translationTable[PS2_KEY_SCROLL]=0x46;
  translationTable[PS2_KEY_CAPS]=0x3A;
     eda:	8a e3       	ldi	r24, 0x3A	; 58
     edc:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <translationTable+0x3>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:40
  translationTable[PS2_KEY_PAUSE]=0x5f;
     ee0:	8f e5       	ldi	r24, 0x5F	; 95
     ee2:	80 93 9e 00 	sts	0x009E, r24	; 0x80009e <translationTable+0x5>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:41
  translationTable[PS2_KEY_L_SHIFT]=0x2A;
     ee6:	8a e2       	ldi	r24, 0x2A	; 42
     ee8:	80 93 9f 00 	sts	0x009F, r24	; 0x80009f <translationTable+0x6>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:42
  translationTable[PS2_KEY_R_SHIFT]=0x36; 
     eec:	86 e3       	ldi	r24, 0x36	; 54
     eee:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <translationTable+0x7>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:43
  translationTable[PS2_KEY_L_ALT] = 0x38 ; 
     ef2:	88 e3       	ldi	r24, 0x38	; 56
     ef4:	80 93 a3 00 	sts	0x00A3, r24	; 0x8000a3 <translationTable+0xa>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:44
  translationTable[PS2_KEY_L_CTRL]=0x1D;
     ef8:	8d e1       	ldi	r24, 0x1D	; 29
     efa:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <translationTable+0x8>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:45
  translationTable[PS2_KEY_L_ARROW]=0x4B;
     efe:	4b e4       	ldi	r20, 0x4B	; 75
     f00:	40 93 ae 00 	sts	0x00AE, r20	; 0x8000ae <translationTable+0x15>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:46
  translationTable[PS2_KEY_R_ARROW]=0x4D;
     f04:	3d e4       	ldi	r19, 0x4D	; 77
     f06:	30 93 af 00 	sts	0x00AF, r19	; 0x8000af <translationTable+0x16>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:47
  translationTable[PS2_KEY_UP_ARROW]=0x48;
     f0a:	98 e4       	ldi	r25, 0x48	; 72
     f0c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <translationTable+0x17>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:48
  translationTable[PS2_KEY_DN_ARROW]=0x50;
     f10:	50 e5       	ldi	r21, 0x50	; 80
     f12:	50 93 b1 00 	sts	0x00B1, r21	; 0x8000b1 <translationTable+0x18>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:49
  translationTable[PS2_KEY_DELETE]=0x53;
     f16:	83 e5       	ldi	r24, 0x53	; 83
     f18:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <translationTable+0x1a>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:50
  translationTable[PS2_KEY_ESC]=0x01;
     f1c:	21 e0       	ldi	r18, 0x01	; 1
     f1e:	20 93 b4 00 	sts	0x00B4, r18	; 0x8000b4 <translationTable+0x1b>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:51
  translationTable[PS2_KEY_BS]=0x0E;
     f22:	8e e0       	ldi	r24, 0x0E	; 14
     f24:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <translationTable+0x1c>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:52
  translationTable[PS2_KEY_TAB]=0x0F;
     f28:	8f e0       	ldi	r24, 0x0F	; 15
     f2a:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <translationTable+0x1d>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:53
  translationTable[PS2_KEY_ENTER]=0x1C;
     f2e:	8c e1       	ldi	r24, 0x1C	; 28
     f30:	80 93 b7 00 	sts	0x00B7, r24	; 0x8000b7 <translationTable+0x1e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:54
  translationTable[PS2_KEY_SPACE]=0x39;
     f34:	69 e3       	ldi	r22, 0x39	; 57
     f36:	60 93 b8 00 	sts	0x00B8, r22	; 0x8000b8 <translationTable+0x1f>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:55
  translationTable[PS2_KEY_SEMI] = 0x27 ;
     f3a:	67 e2       	ldi	r22, 0x27	; 39
     f3c:	60 93 f4 00 	sts	0x00F4, r22	; 0x8000f4 <translationTable+0x5b>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:56
  translationTable[PS2_KEY_KP0]=0x52;
     f40:	62 e5       	ldi	r22, 0x52	; 82
     f42:	60 93 b9 00 	sts	0x00B9, r22	; 0x8000b9 <translationTable+0x20>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:57
  translationTable[PS2_KEY_KP1]=0x4F;
     f46:	6f e4       	ldi	r22, 0x4F	; 79
     f48:	60 93 ba 00 	sts	0x00BA, r22	; 0x8000ba <translationTable+0x21>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:58
  translationTable[PS2_KEY_KP2]=0x50;
     f4c:	50 93 bb 00 	sts	0x00BB, r21	; 0x8000bb <translationTable+0x22>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:59
  translationTable[PS2_KEY_KP3]=0x51;
     f50:	51 e5       	ldi	r21, 0x51	; 81
     f52:	50 93 bc 00 	sts	0x00BC, r21	; 0x8000bc <translationTable+0x23>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:60
  translationTable[PS2_KEY_KP4]=0x4B;
     f56:	40 93 bd 00 	sts	0x00BD, r20	; 0x8000bd <translationTable+0x24>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:61
  translationTable[PS2_KEY_KP5]=0x4C;
     f5a:	4c e4       	ldi	r20, 0x4C	; 76
     f5c:	40 93 be 00 	sts	0x00BE, r20	; 0x8000be <translationTable+0x25>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:62
  translationTable[PS2_KEY_KP6]=0x4D;
     f60:	30 93 bf 00 	sts	0x00BF, r19	; 0x8000bf <translationTable+0x26>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:63
  translationTable[PS2_KEY_KP7]=0x47;
     f64:	37 e4       	ldi	r19, 0x47	; 71
     f66:	30 93 c0 00 	sts	0x00C0, r19	; 0x8000c0 <translationTable+0x27>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:64
  translationTable[PS2_KEY_KP8]=0x48;
     f6a:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <translationTable+0x28>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:65
  translationTable[PS2_KEY_KP9]=0x49;
     f6e:	99 e4       	ldi	r25, 0x49	; 73
     f70:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <translationTable+0x29>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:66
  translationTable[PS2_KEY_OPEN_SQ]=0x1A;
     f74:	9a e1       	ldi	r25, 0x1A	; 26
     f76:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <translationTable+0x5d>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:67
  translationTable[PS2_KEY_CLOSE_SQ]=0x1B;
     f7a:	9b e1       	ldi	r25, 0x1B	; 27
     f7c:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <translationTable+0x5e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:70
  translationTable[PS2_LOCK_NUM]=0x45;
  //translationTable[PS2_KEY_KP_DOT]=0x53;
  translationTable[PS2_KEY_KP_PLUS]=0x4E;
     f80:	9e e4       	ldi	r25, 0x4E	; 78
     f82:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <translationTable+0x2c>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:71
  translationTable[PS2_KEY_KP_MINUS]=0x4A;
     f86:	9a e4       	ldi	r25, 0x4A	; 74
     f88:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <translationTable+0x2d>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:72
  translationTable[PS2_KEY_KP_TIMES]=0x37; 
     f8c:	97 e3       	ldi	r25, 0x37	; 55
     f8e:	90 93 c7 00 	sts	0x00C7, r25	; 0x8000c7 <translationTable+0x2e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:73
  translationTable[PS2_KEY_KP_DIV]=0x35; 
     f92:	95 e3       	ldi	r25, 0x35	; 53
     f94:	90 93 c8 00 	sts	0x00C8, r25	; 0x8000c8 <translationTable+0x2f>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:74
  translationTable[PS2_KEY_KP_ENTER]=0x01; 
     f98:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <translationTable+0x2b>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:75
  translationTable[PS2_KEY_0]=0x0B;
     f9c:	2b e0       	ldi	r18, 0x0B	; 11
     f9e:	20 93 c9 00 	sts	0x00C9, r18	; 0x8000c9 <translationTable+0x30>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:76
  translationTable[PS2_KEY_1]=0x02;
     fa2:	22 e0       	ldi	r18, 0x02	; 2
     fa4:	20 93 ca 00 	sts	0x00CA, r18	; 0x8000ca <translationTable+0x31>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:77
  translationTable[PS2_KEY_2]=0x03;
     fa8:	d3 e0       	ldi	r29, 0x03	; 3
     faa:	d0 93 cb 00 	sts	0x00CB, r29	; 0x8000cb <translationTable+0x32>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:78
  translationTable[PS2_KEY_3]=0x04;
     fae:	c4 e0       	ldi	r28, 0x04	; 4
     fb0:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <translationTable+0x33>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:79
  translationTable[PS2_KEY_4]=0x05;
     fb4:	25 e0       	ldi	r18, 0x05	; 5
     fb6:	20 93 cd 00 	sts	0x00CD, r18	; 0x8000cd <translationTable+0x34>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:80
  translationTable[PS2_KEY_5]=0x06;
     fba:	26 e0       	ldi	r18, 0x06	; 6
     fbc:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <translationTable+0x35>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:81
  translationTable[PS2_KEY_6]=0x07;
     fc0:	27 e0       	ldi	r18, 0x07	; 7
     fc2:	20 93 cf 00 	sts	0x00CF, r18	; 0x8000cf <translationTable+0x36>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:82
  translationTable[PS2_KEY_7]=0x08;
     fc6:	28 e0       	ldi	r18, 0x08	; 8
     fc8:	20 93 d0 00 	sts	0x00D0, r18	; 0x8000d0 <translationTable+0x37>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:83
  translationTable[PS2_KEY_8]=0x09;
     fcc:	29 e0       	ldi	r18, 0x09	; 9
     fce:	20 93 d1 00 	sts	0x00D1, r18	; 0x8000d1 <translationTable+0x38>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:84
  translationTable[PS2_KEY_9]=0x0A;
     fd2:	2a e0       	ldi	r18, 0x0A	; 10
     fd4:	20 93 d2 00 	sts	0x00D2, r18	; 0x8000d2 <translationTable+0x39>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:85
  translationTable[PS2_KEY_APOS]=0x28; 
     fd8:	28 e2       	ldi	r18, 0x28	; 40
     fda:	20 93 d3 00 	sts	0x00D3, r18	; 0x8000d3 <translationTable+0x3a>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:86
  translationTable[PS2_KEY_COMMA]=0x33;
     fde:	23 e3       	ldi	r18, 0x33	; 51
     fe0:	20 93 d4 00 	sts	0x00D4, r18	; 0x8000d4 <translationTable+0x3b>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:87
  translationTable[PS2_KEY_MINUS]=0x0C;
     fe4:	2c e0       	ldi	r18, 0x0C	; 12
     fe6:	20 93 d5 00 	sts	0x00D5, r18	; 0x8000d5 <translationTable+0x3c>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:88
  translationTable[PS2_KEY_SCROLL] = 0x46 ;
     fea:	26 e4       	ldi	r18, 0x46	; 70
     fec:	20 93 9b 00 	sts	0x009B, r18	; 0x80009b <translationTable+0x2>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:89
  translationTable[PS2_KEY_DOT]=0x34;
     ff0:	24 e3       	ldi	r18, 0x34	; 52
     ff2:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <translationTable+0x3d>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:90
  translationTable[PS2_KEY_BACK] =0x2B ;
     ff6:	2b e2       	ldi	r18, 0x2B	; 43
     ff8:	20 93 f5 00 	sts	0x00F5, r18	; 0x8000f5 <translationTable+0x5c>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:92
  translationTable[PS2_KEY_SINGLE] = 0x29 ;
  translationTable[PS2_KEY_DIV]=0x35;
     ffc:	90 93 d7 00 	sts	0x00D7, r25	; 0x8000d7 <translationTable+0x3e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:93
  translationTable[PS2_KEY_SINGLE]=28;    
    1000:	80 93 d9 00 	sts	0x00D9, r24	; 0x8000d9 <translationTable+0x40>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:94
  translationTable[PS2_KEY_A]=0x1E;
    1004:	8e e1       	ldi	r24, 0x1E	; 30
    1006:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <translationTable+0x41>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:95
  translationTable[PS2_KEY_B]=0x30;
    100a:	80 e3       	ldi	r24, 0x30	; 48
    100c:	80 93 db 00 	sts	0x00DB, r24	; 0x8000db <translationTable+0x42>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:96
  translationTable[PS2_KEY_C]=0x2E;
    1010:	8e e2       	ldi	r24, 0x2E	; 46
    1012:	80 93 dc 00 	sts	0x00DC, r24	; 0x8000dc <translationTable+0x43>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:97
  translationTable[PS2_KEY_D]=0x20;
    1016:	80 e2       	ldi	r24, 0x20	; 32
    1018:	80 93 dd 00 	sts	0x00DD, r24	; 0x8000dd <translationTable+0x44>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:98
  translationTable[PS2_KEY_E]=0x12;
    101c:	82 e1       	ldi	r24, 0x12	; 18
    101e:	80 93 de 00 	sts	0x00DE, r24	; 0x8000de <translationTable+0x45>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:99
  translationTable[PS2_KEY_F]=0x21;
    1022:	81 e2       	ldi	r24, 0x21	; 33
    1024:	80 93 df 00 	sts	0x00DF, r24	; 0x8000df <translationTable+0x46>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:100
  translationTable[PS2_KEY_G]=0x22;
    1028:	82 e2       	ldi	r24, 0x22	; 34
    102a:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <translationTable+0x47>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:101
  translationTable[PS2_KEY_H]=0x23;
    102e:	83 e2       	ldi	r24, 0x23	; 35
    1030:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <translationTable+0x48>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:102
  translationTable[PS2_KEY_I]=0x17;
    1034:	87 e1       	ldi	r24, 0x17	; 23
    1036:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <translationTable+0x49>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:103
  translationTable[PS2_KEY_J]=0x24;
    103a:	84 e2       	ldi	r24, 0x24	; 36
    103c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <translationTable+0x4a>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:104
  translationTable[PS2_KEY_K]=0x25;
    1040:	85 e2       	ldi	r24, 0x25	; 37
    1042:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <translationTable+0x4b>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:105
  translationTable[PS2_KEY_L]=0x26;
    1046:	86 e2       	ldi	r24, 0x26	; 38
    1048:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <translationTable+0x4c>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:106
  translationTable[PS2_KEY_M]=0x32;
    104c:	82 e3       	ldi	r24, 0x32	; 50
    104e:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <translationTable+0x4d>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:107
  translationTable[PS2_KEY_N]=0x31;
    1052:	81 e3       	ldi	r24, 0x31	; 49
    1054:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <translationTable+0x4e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:108
  translationTable[PS2_KEY_O]=0x18;
    1058:	88 e1       	ldi	r24, 0x18	; 24
    105a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <translationTable+0x4f>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:109
  translationTable[PS2_KEY_P]=0x19;
    105e:	89 e1       	ldi	r24, 0x19	; 25
    1060:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <translationTable+0x50>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:110
  translationTable[PS2_KEY_Q]=0x10;
    1064:	80 e1       	ldi	r24, 0x10	; 16
    1066:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <translationTable+0x51>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:111
  translationTable[PS2_KEY_R]=0x13;
    106a:	83 e1       	ldi	r24, 0x13	; 19
    106c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <translationTable+0x52>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:112
  translationTable[PS2_KEY_S]=0x1F;
    1070:	8f e1       	ldi	r24, 0x1F	; 31
    1072:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <translationTable+0x53>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:113
  translationTable[PS2_KEY_T]=0x14;
    1076:	84 e1       	ldi	r24, 0x14	; 20
    1078:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <translationTable+0x54>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:114
  translationTable[PS2_KEY_U]=0x16;
    107c:	86 e1       	ldi	r24, 0x16	; 22
    107e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <translationTable+0x55>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:115
  translationTable[PS2_KEY_V]=0x2F;
    1082:	8f e2       	ldi	r24, 0x2F	; 47
    1084:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <translationTable+0x56>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:116
  translationTable[PS2_KEY_W]=0x11;
    1088:	81 e1       	ldi	r24, 0x11	; 17
    108a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <translationTable+0x57>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:117
  translationTable[PS2_KEY_X]=0x2D;
    108e:	8d e2       	ldi	r24, 0x2D	; 45
    1090:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <translationTable+0x58>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:118
  translationTable[PS2_KEY_Y]=0x15;
    1094:	85 e1       	ldi	r24, 0x15	; 21
    1096:	80 93 f2 00 	sts	0x00F2, r24	; 0x8000f2 <translationTable+0x59>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:119
  translationTable[PS2_KEY_Z]=0x2c;
    109a:	8c e2       	ldi	r24, 0x2C	; 44
    109c:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <translationTable+0x5a>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:120
  translationTable[PS2_KEY_EQUAL]=0x0D;  
    10a0:	8d e0       	ldi	r24, 0x0D	; 13
    10a2:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <translationTable+0x5f>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:121
  translationTable[PS2_KEY_F1]=0x3B;
    10a6:	8b e3       	ldi	r24, 0x3B	; 59
    10a8:	80 93 fa 00 	sts	0x00FA, r24	; 0x8000fa <translationTable+0x61>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:122
  translationTable[PS2_KEY_F2]=0x3C;
    10ac:	8c e3       	ldi	r24, 0x3C	; 60
    10ae:	80 93 fb 00 	sts	0x00FB, r24	; 0x8000fb <translationTable+0x62>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:123
  translationTable[PS2_KEY_F3]=0x3D;
    10b2:	8d e3       	ldi	r24, 0x3D	; 61
    10b4:	80 93 fc 00 	sts	0x00FC, r24	; 0x8000fc <translationTable+0x63>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:124
  translationTable[PS2_KEY_F4]=0x3E;
    10b8:	8e e3       	ldi	r24, 0x3E	; 62
    10ba:	80 93 fd 00 	sts	0x00FD, r24	; 0x8000fd <translationTable+0x64>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:125
  translationTable[PS2_KEY_F5]=0x3F;
    10be:	8f e3       	ldi	r24, 0x3F	; 63
    10c0:	80 93 fe 00 	sts	0x00FE, r24	; 0x8000fe <translationTable+0x65>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:126
  translationTable[PS2_KEY_F6]=0x40;
    10c4:	80 e4       	ldi	r24, 0x40	; 64
    10c6:	80 93 ff 00 	sts	0x00FF, r24	; 0x8000ff <translationTable+0x66>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:127
  translationTable[PS2_KEY_F7]=0x41;
    10ca:	81 e4       	ldi	r24, 0x41	; 65
    10cc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <translationTable+0x67>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:128
  translationTable[PS2_KEY_F8]=0x42;
    10d0:	82 e4       	ldi	r24, 0x42	; 66
    10d2:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <translationTable+0x68>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:129
  translationTable[PS2_KEY_F9]=0x43;
    10d6:	83 e4       	ldi	r24, 0x43	; 67
    10d8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <translationTable+0x69>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:130
  translationTable[PS2_KEY_F10]=0x44;
    10dc:	84 e4       	ldi	r24, 0x44	; 68
    10de:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <translationTable+0x6a>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:131
  translationTable[PS2_KEY_F11]=0x85;
    10e2:	85 e8       	ldi	r24, 0x85	; 133
    10e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <translationTable+0x6b>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:132
  translationTable[PS2_KEY_F12]=0x86;
    10e8:	86 e8       	ldi	r24, 0x86	; 134
    10ea:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <translationTable+0x6c>
begin():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:1005

/* instantiate class for keyboard  */
void PS2KeyAdvanced::begin( uint8_t data_pin, uint8_t irq_pin )
{
/* PS2 variables reset */
ps2_reset( );
    10ee:	d1 d9       	rcall	.-3166   	; 0x492 <ps2_reset()>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:1007

PS2_DataPin = data_pin;
    10f0:	d0 93 98 00 	sts	0x0098, r29	; 0x800098 <PS2_DataPin>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:1008
PS2_IrqPin = irq_pin;
    10f4:	c0 93 97 00 	sts	0x0097, r28	; 0x800097 <PS2_IrqPin>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:1011

// initialize the pins
pininput( PS2_IrqPin );            /* Setup Clock pin */
    10f8:	84 e0       	ldi	r24, 0x04	; 4
    10fa:	f7 d9       	rcall	.-3090   	; 0x4ea <pininput(unsigned char)>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:1012
pininput( PS2_DataPin );           /* Setup Data pin */
    10fc:	83 e0       	ldi	r24, 0x03	; 3
    10fe:	f5 d9       	rcall	.-3094   	; 0x4ea <pininput(unsigned char)>
pinMode():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:249
      return;
      // NOP
    }
    else if(mode == OUTPUT)
    {
      ((void)(*((volatile uint8_t *)portModeRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
    1100:	b9 9a       	sbi	0x17, 1	; 23
    1102:	b8 9a       	sbi	0x17, 0	; 23
digitalWrite():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Arduino.h:336
      #endif
    }

    if(val == HIGH)
    {
      ((void)(*((volatile uint8_t *)portOutputRegister(digitalPinToPort(pin))) |= digitalPinToBitMask(pin)));
    1104:	c1 9a       	sbi	0x18, 1	; 24
_turnOffPWM():
    1106:	67 d9       	rcall	.-3378   	; 0x3d6 <_turnOffPWM.part.1>
digitalWrite():
    1108:	c0 9a       	sbi	0x18, 0	; 24
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065
    110a:	9c ec       	ldi	r25, 0xCC	; 204
    110c:	e9 2e       	mov	r14, r25
    110e:	97 e0       	ldi	r25, 0x07	; 7
    1110:	f9 2e       	mov	r15, r25
loop():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:188
byte i = 0 ;
unsigned char ascan;

void loop() 
{
  if( keyboard.available() )
    1112:	7e da       	rcall	.-2820   	; 0x610 <PS2KeyAdvanced::available() [clone .constprop.4]>
    1114:	88 23       	and	r24, r24
    1116:	09 f4       	brne	.+2      	; 0x111a <main+0x26a>
    1118:	83 c0       	rjmp	.+262    	; 0x1220 <main+0x370>
read():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:982
uint16_t PS2KeyAdvanced::read( )
{
uint16_t result;
uint8_t idx;

if( ( result = available( ) ) )
    111a:	7a da       	rcall	.-2828   	; 0x610 <PS2KeyAdvanced::available() [clone .constprop.4]>
    111c:	81 11       	cpse	r24, r1
    111e:	26 c0       	rjmp	.+76     	; 0x116c <main+0x2bc>
loop():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:190
  {
  c = keyboard.read();
    1120:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <c+0x1>
    1124:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <c>
    1128:	d0 e0       	ldi	r29, 0x00	; 0
    112a:	c0 e0       	ldi	r28, 0x00	; 0
    112c:	ce 01       	movw	r24, r28
    112e:	99 27       	eor	r25, r25
    1130:	fc 01       	movw	r30, r24
    1132:	38 97       	sbiw	r30, 0x08	; 8
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:214
    Serial.print( "  Code " );
#endif
    Serial.println( c & 0xFF, HEX );
    }

    if( !( c & PS2_BREAK ) ) 
    1134:	d7 fd       	sbrc	r29, 7
    1136:	e8 c0       	rjmp	.+464    	; 0x1308 <main+0x458>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:216
  {
    switch (c & 0xff)
    1138:	e3 31       	cpi	r30, 0x13	; 19
    113a:	f1 05       	cpc	r31, r1
    113c:	08 f0       	brcs	.+2      	; 0x1140 <main+0x290>
    113e:	a1 c0       	rjmp	.+322    	; 0x1282 <main+0x3d2>
    1140:	ed 55       	subi	r30, 0x5D	; 93
    1142:	f7 4f       	sbci	r31, 0xF7	; 247
    1144:	09 94       	ijmp
    1146:	68 c0       	rjmp	.+208    	; 0x1218 <main+0x368>
    1148:	9c c0       	rjmp	.+312    	; 0x1282 <main+0x3d2>
    114a:	9b c0       	rjmp	.+310    	; 0x1282 <main+0x3d2>
    114c:	6e c0       	rjmp	.+220    	; 0x122a <main+0x37a>
    114e:	99 c0       	rjmp	.+306    	; 0x1282 <main+0x3d2>
    1150:	98 c0       	rjmp	.+304    	; 0x1282 <main+0x3d2>
    1152:	97 c0       	rjmp	.+302    	; 0x1282 <main+0x3d2>
    1154:	96 c0       	rjmp	.+300    	; 0x1282 <main+0x3d2>
    1156:	95 c0       	rjmp	.+298    	; 0x1282 <main+0x3d2>
    1158:	70 c0       	rjmp	.+224    	; 0x123a <main+0x38a>
    115a:	73 c0       	rjmp	.+230    	; 0x1242 <main+0x392>
    115c:	8a c0       	rjmp	.+276    	; 0x1272 <main+0x3c2>
    115e:	79 c0       	rjmp	.+242    	; 0x1252 <main+0x3a2>
    1160:	7c c0       	rjmp	.+248    	; 0x125a <main+0x3aa>
    1162:	7f c0       	rjmp	.+254    	; 0x1262 <main+0x3b2>
    1164:	82 c0       	rjmp	.+260    	; 0x126a <main+0x3ba>
    1166:	71 c0       	rjmp	.+226    	; 0x124a <main+0x39a>
    1168:	64 c0       	rjmp	.+200    	; 0x1232 <main+0x382>
    116a:	87 c0       	rjmp	.+270    	; 0x127a <main+0x3ca>
read():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:984
  {
  idx = _key_tail;
    116c:	e0 91 3b 01 	lds	r30, 0x013B	; 0x80013b <_key_tail>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:985
  idx++;
    1170:	ef 5f       	subi	r30, 0xFF	; 255
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:986
  if( idx >= _KEY_BUFF_SIZE )  // loop to front if necessary
    1172:	e4 30       	cpi	r30, 0x04	; 4
    1174:	08 f0       	brcs	.+2      	; 0x1178 <main+0x2c8>
main():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:987
    idx = 0;
    1176:	e0 e0       	ldi	r30, 0x00	; 0
read():
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:988
  _key_tail = idx;
    1178:	e0 93 3b 01 	sts	0x013B, r30	; 0x80013b <_key_tail>
c:\Users\spam\OneDrive\Dokumente\Arduino\libraries\PS2KeyAdvanced\src/PS2KeyAdvanced.cpp:989
  result = _key_buffer[ idx ];
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	ee 0f       	add	r30, r30
    1180:	ff 1f       	adc	r31, r31
    1182:	ed 5c       	subi	r30, 0xCD	; 205
    1184:	fe 4f       	sbci	r31, 0xFE	; 254
    1186:	c0 81       	ld	r28, Z
    1188:	d1 81       	ldd	r29, Z+1	; 0x01
loop():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:190

void loop() 
{
  if( keyboard.available() )
  {
  c = keyboard.read();
    118a:	d0 93 1a 01 	sts	0x011A, r29	; 0x80011a <c+0x1>
    118e:	c0 93 19 01 	sts	0x0119, r28	; 0x800119 <c>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:192
  
  if( c > 0 )
    1192:	20 97       	sbiw	r28, 0x00	; 0
    1194:	09 f4       	brne	.+2      	; 0x1198 <main+0x2e8>
    1196:	ca cf       	rjmp	.-108    	; 0x112c <main+0x27c>
print():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:124
  return print((PRINT_INT_TYPE) n, base);
}

size_t Print::print(unsigned int n, uint8_t base)
{
  return print((UNSIGNED_PRINT_INT_TYPE) n, base);
    1198:	4e 01       	movw	r8, r28
    119a:	99 24       	eor	r9, r9
    119c:	b1 2c       	mov	r11, r1
    119e:	a1 2c       	mov	r10, r1
    11a0:	d1 2c       	mov	r13, r1
    11a2:	0f e2       	ldi	r16, 0x2F	; 47
    11a4:	10 e0       	ldi	r17, 0x00	; 0
printNumber():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:484
    
    // Reuse base for counting the digits since we don't need it any more.
    base = 0;
    do
    {
        UNSIGNED_PRINT_INT_TYPE b = PGM_READ_MAX_INT_TYPE(&*bt++);
    11a6:	0c 5f       	subi	r16, 0xFC	; 252
    11a8:	1f 4f       	sbci	r17, 0xFF	; 255
    11aa:	f8 01       	movw	r30, r16
    11ac:	34 97       	sbiw	r30, 0x04	; 4
    11ae:	85 91       	lpm	r24, Z+
    11b0:	95 91       	lpm	r25, Z+
    11b2:	a5 91       	lpm	r26, Z+
    11b4:	b4 91       	lpm	r27, Z
main():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:485
        uint8_t digit = 0;
    11b6:	60 e0       	ldi	r22, 0x00	; 0
printNumber():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:486
        while (n >= b)
    11b8:	88 16       	cp	r8, r24
    11ba:	99 06       	cpc	r9, r25
    11bc:	aa 06       	cpc	r10, r26
    11be:	bb 06       	cpc	r11, r27
    11c0:	30 f0       	brcs	.+12     	; 0x11ce <main+0x31e>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:488
        {
            digit++;
    11c2:	6f 5f       	subi	r22, 0xFF	; 255
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:489
            n = n - b;
    11c4:	88 1a       	sub	r8, r24
    11c6:	99 0a       	sbc	r9, r25
    11c8:	aa 0a       	sbc	r10, r26
    11ca:	bb 0a       	sbc	r11, r27
    11cc:	f5 cf       	rjmp	.-22     	; 0x11b8 <main+0x308>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:491
        }
        leadingzero = leadingzero ? leadingzero : digit;
    11ce:	d1 10       	cpse	r13, r1
    11d0:	07 c0       	rjmp	.+14     	; 0x11e0 <main+0x330>
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:492
        if (b == 1 || leadingzero)
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	a1 05       	cpc	r26, r1
    11d6:	b1 05       	cpc	r27, r1
    11d8:	11 f0       	breq	.+4      	; 0x11de <main+0x32e>
    11da:	66 23       	and	r22, r22
    11dc:	51 f0       	breq	.+20     	; 0x11f2 <main+0x342>
    11de:	d6 2e       	mov	r13, r22
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:495
        {
            ++base;
            write(pgm_read_byte(&digits[digit]));          
    11e0:	e6 2f       	mov	r30, r22
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	e2 5e       	subi	r30, 0xE2	; 226
    11e6:	ff 4f       	sbci	r31, 0xFF	; 255
    11e8:	64 91       	lpm	r22, Z
    11ea:	83 e6       	ldi	r24, 0x63	; 99
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	44 d8       	rcall	.-3960   	; 0x278 <TinySoftwareSerial::write(unsigned char)>
    11f0:	6d 2d       	mov	r22, r13
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:498
        }
    }
    while (PGM_READ_MAX_INT_TYPE(&*bt));       
    11f2:	f8 01       	movw	r30, r16
    11f4:	85 91       	lpm	r24, Z+
    11f6:	95 91       	lpm	r25, Z+
    11f8:	a5 91       	lpm	r26, Z+
    11fa:	b4 91       	lpm	r27, Z
    11fc:	d6 2e       	mov	r13, r22
    11fe:	89 2b       	or	r24, r25
    1200:	8a 2b       	or	r24, r26
    1202:	8b 2b       	or	r24, r27
    1204:	81 f6       	brne	.-96     	; 0x11a6 <main+0x2f6>
print():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/Print.cpp:106

// print of a char must always just pass straight to write
// in order to print the actual character rather than it's value
size_t Print::print(char c)
{
  return write(c);
    1206:	6d e0       	ldi	r22, 0x0D	; 13
    1208:	83 e6       	ldi	r24, 0x63	; 99
    120a:	91 e0       	ldi	r25, 0x01	; 1
    120c:	35 d8       	rcall	.-3990   	; 0x278 <TinySoftwareSerial::write(unsigned char)>
    120e:	6a e0       	ldi	r22, 0x0A	; 10
    1210:	83 e6       	ldi	r24, 0x63	; 99
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	31 d8       	rcall	.-3998   	; 0x278 <TinySoftwareSerial::write(unsigned char)>
    1216:	8a cf       	rjmp	.-236    	; 0x112c <main+0x27c>
loop():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:218

    if( !( c & PS2_BREAK ) ) 
  {
    switch (c & 0xff)
    {
      case PS2_KEY_L_CTRL: _write(0xE0); _write(0x1D); break ;
    1218:	80 ee       	ldi	r24, 0xE0	; 224
    121a:	c5 dc       	rcall	.-1654   	; 0xba6 <_write(unsigned char)>
    121c:	8d e1       	ldi	r24, 0x1D	; 29
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:258
      case PS2_KEY_PGUP: _write(0xE0); _write(0x49 | 0x80); break ;
      case PS2_KEY_DELETE: _write(0xE0); _write(0x53 | 0x80); break ;   
      default:
      {
        ascan = translationTable[c & 0xff];
      _write(ascan | 0x80) ;
    121e:	c3 dc       	rcall	.-1658   	; 0xba6 <_write(unsigned char)>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:265
    }
   
  }
  }
  
  if (digitalRead(xt_clk) == LOW) // power-on self test
    1220:	b1 99       	sbic	0x16, 1	; 22
    1222:	77 cf       	rjmp	.-274    	; 0x1112 <main+0x262>
    1224:	8b e0       	ldi	r24, 0x0B	; 11
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	6a c0       	rjmp	.+212    	; 0x12fe <main+0x44e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:219
    if( !( c & PS2_BREAK ) ) 
  {
    switch (c & 0xff)
    {
      case PS2_KEY_L_CTRL: _write(0xE0); _write(0x1D); break ;
      case PS2_KEY_R_ALT: _write(0xE0); _write(0x38); break ;
    122a:	80 ee       	ldi	r24, 0xE0	; 224
    122c:	bc dc       	rcall	.-1672   	; 0xba6 <_write(unsigned char)>
    122e:	88 e3       	ldi	r24, 0x38	; 56
    1230:	f6 cf       	rjmp	.-20     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:220
      case PS2_KEY_INSERT: _write(0xE0); _write(0x52); break ;
    1232:	80 ee       	ldi	r24, 0xE0	; 224
    1234:	b8 dc       	rcall	.-1680   	; 0xba6 <_write(unsigned char)>
    1236:	82 e5       	ldi	r24, 0x52	; 82
    1238:	f2 cf       	rjmp	.-28     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:221
      case PS2_KEY_HOME: _write(0xE0); _write(0x47); break ;
    123a:	80 ee       	ldi	r24, 0xE0	; 224
    123c:	b4 dc       	rcall	.-1688   	; 0xba6 <_write(unsigned char)>
    123e:	87 e4       	ldi	r24, 0x47	; 71
    1240:	ee cf       	rjmp	.-36     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:222
      case PS2_KEY_END: _write(0xE0); _write(0x4F); break ;
    1242:	80 ee       	ldi	r24, 0xE0	; 224
    1244:	b0 dc       	rcall	.-1696   	; 0xba6 <_write(unsigned char)>
    1246:	8f e4       	ldi	r24, 0x4F	; 79
    1248:	ea cf       	rjmp	.-44     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:223
      case PS2_KEY_DN_ARROW: _write(0xE0); _write(0x50); break ;
    124a:	80 ee       	ldi	r24, 0xE0	; 224
    124c:	ac dc       	rcall	.-1704   	; 0xba6 <_write(unsigned char)>
    124e:	80 e5       	ldi	r24, 0x50	; 80
    1250:	e6 cf       	rjmp	.-52     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:224
      case PS2_KEY_PGDN: _write(0xE0); _write(0x51); break ;
    1252:	80 ee       	ldi	r24, 0xE0	; 224
    1254:	a8 dc       	rcall	.-1712   	; 0xba6 <_write(unsigned char)>
    1256:	81 e5       	ldi	r24, 0x51	; 81
    1258:	e2 cf       	rjmp	.-60     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:225
      case PS2_KEY_L_ARROW: _write(0xE0); _write(0x4B); break ;
    125a:	80 ee       	ldi	r24, 0xE0	; 224
    125c:	a4 dc       	rcall	.-1720   	; 0xba6 <_write(unsigned char)>
    125e:	8b e4       	ldi	r24, 0x4B	; 75
    1260:	de cf       	rjmp	.-68     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:226
      case PS2_KEY_R_ARROW: _write(0xE0); _write(0x4D); break ;
    1262:	80 ee       	ldi	r24, 0xE0	; 224
    1264:	a0 dc       	rcall	.-1728   	; 0xba6 <_write(unsigned char)>
    1266:	8d e4       	ldi	r24, 0x4D	; 77
    1268:	da cf       	rjmp	.-76     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:227
      case PS2_KEY_UP_ARROW: _write(0xE0); _write(0x48); break ;
    126a:	80 ee       	ldi	r24, 0xE0	; 224
    126c:	9c dc       	rcall	.-1736   	; 0xba6 <_write(unsigned char)>
    126e:	88 e4       	ldi	r24, 0x48	; 72
    1270:	d6 cf       	rjmp	.-84     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:228
      case PS2_KEY_PGUP: _write(0xE0); _write(0x49); break ;
    1272:	80 ee       	ldi	r24, 0xE0	; 224
    1274:	98 dc       	rcall	.-1744   	; 0xba6 <_write(unsigned char)>
    1276:	89 e4       	ldi	r24, 0x49	; 73
    1278:	d2 cf       	rjmp	.-92     	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:229
      case PS2_KEY_DELETE: _write(0xE0); _write(0x53); break ;      
    127a:	80 ee       	ldi	r24, 0xE0	; 224
    127c:	94 dc       	rcall	.-1752   	; 0xba6 <_write(unsigned char)>
    127e:	83 e5       	ldi	r24, 0x53	; 83
    1280:	ce cf       	rjmp	.-100    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:232
      default:
      {
      ascan = translationTable[c & 0xff];
    1282:	87 56       	subi	r24, 0x67	; 103
    1284:	9f 4f       	sbci	r25, 0xFF	; 255
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:233
     _write(ascan) ; break ;
    1286:	fc 01       	movw	r30, r24
    1288:	80 81       	ld	r24, Z
    128a:	c9 cf       	rjmp	.-110    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:243

  if( ( c & PS2_BREAK ) ) 
  {
    switch (c & 0xff)
    {
      case PS2_KEY_L_CTRL: _write(0xE0); _write(0x1D | 0x80); break ;
    128c:	80 ee       	ldi	r24, 0xE0	; 224
    128e:	8b dc       	rcall	.-1770   	; 0xba6 <_write(unsigned char)>
    1290:	8d e9       	ldi	r24, 0x9D	; 157
    1292:	c5 cf       	rjmp	.-118    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:244
      case PS2_KEY_R_ALT: _write(0xE0); _write(0x38 | 0x80); break ;
    1294:	80 ee       	ldi	r24, 0xE0	; 224
    1296:	87 dc       	rcall	.-1778   	; 0xba6 <_write(unsigned char)>
    1298:	88 eb       	ldi	r24, 0xB8	; 184
    129a:	c1 cf       	rjmp	.-126    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:245
      case PS2_KEY_INSERT: _write(0xE0); _write(0x52 | 0x80); break ;
    129c:	80 ee       	ldi	r24, 0xE0	; 224
    129e:	83 dc       	rcall	.-1786   	; 0xba6 <_write(unsigned char)>
    12a0:	82 ed       	ldi	r24, 0xD2	; 210
    12a2:	bd cf       	rjmp	.-134    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:246
      case PS2_KEY_HOME: _write(0xE0); _write(0x47 | 0x80); break ;
    12a4:	80 ee       	ldi	r24, 0xE0	; 224
    12a6:	7f dc       	rcall	.-1794   	; 0xba6 <_write(unsigned char)>
    12a8:	87 ec       	ldi	r24, 0xC7	; 199
    12aa:	b9 cf       	rjmp	.-142    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:247
      case PS2_KEY_END: _write(0xE0); _write(0x4F | 0x80); break ;
    12ac:	80 ee       	ldi	r24, 0xE0	; 224
    12ae:	7b dc       	rcall	.-1802   	; 0xba6 <_write(unsigned char)>
    12b0:	8f ec       	ldi	r24, 0xCF	; 207
    12b2:	b5 cf       	rjmp	.-150    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:248
      case PS2_KEY_DN_ARROW: _write(0xE0); _write(0x50 | 0x80); break ;
    12b4:	80 ee       	ldi	r24, 0xE0	; 224
    12b6:	77 dc       	rcall	.-1810   	; 0xba6 <_write(unsigned char)>
    12b8:	80 ed       	ldi	r24, 0xD0	; 208
    12ba:	b1 cf       	rjmp	.-158    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:249
      case PS2_KEY_PGDN: _write(0xE0); _write(0x51 | 0x80); break ;
    12bc:	80 ee       	ldi	r24, 0xE0	; 224
    12be:	73 dc       	rcall	.-1818   	; 0xba6 <_write(unsigned char)>
    12c0:	81 ed       	ldi	r24, 0xD1	; 209
    12c2:	ad cf       	rjmp	.-166    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:250
      case PS2_KEY_L_ARROW: _write(0xE0); _write(0x4B | 0x80); break ;
    12c4:	80 ee       	ldi	r24, 0xE0	; 224
    12c6:	6f dc       	rcall	.-1826   	; 0xba6 <_write(unsigned char)>
    12c8:	8b ec       	ldi	r24, 0xCB	; 203
    12ca:	a9 cf       	rjmp	.-174    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:251
      case PS2_KEY_R_ARROW: _write(0xE0); _write(0x4D | 0x80); break ;
    12cc:	80 ee       	ldi	r24, 0xE0	; 224
    12ce:	6b dc       	rcall	.-1834   	; 0xba6 <_write(unsigned char)>
    12d0:	8d ec       	ldi	r24, 0xCD	; 205
    12d2:	a5 cf       	rjmp	.-182    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:252
      case PS2_KEY_UP_ARROW: _write(0xE0); _write(0x48 | 0x80); break ;
    12d4:	80 ee       	ldi	r24, 0xE0	; 224
    12d6:	67 dc       	rcall	.-1842   	; 0xba6 <_write(unsigned char)>
    12d8:	88 ec       	ldi	r24, 0xC8	; 200
    12da:	a1 cf       	rjmp	.-190    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:253
      case PS2_KEY_PGUP: _write(0xE0); _write(0x49 | 0x80); break ;
    12dc:	80 ee       	ldi	r24, 0xE0	; 224
    12de:	63 dc       	rcall	.-1850   	; 0xba6 <_write(unsigned char)>
    12e0:	89 ec       	ldi	r24, 0xC9	; 201
    12e2:	9d cf       	rjmp	.-198    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:254
      case PS2_KEY_DELETE: _write(0xE0); _write(0x53 | 0x80); break ;   
    12e4:	80 ee       	ldi	r24, 0xE0	; 224
    12e6:	5f dc       	rcall	.-1858   	; 0xba6 <_write(unsigned char)>
    12e8:	83 ed       	ldi	r24, 0xD3	; 211
    12ea:	99 cf       	rjmp	.-206    	; 0x121e <main+0x36e>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:257
      default:
      {
        ascan = translationTable[c & 0xff];
    12ec:	87 56       	subi	r24, 0x67	; 103
    12ee:	9f 4f       	sbci	r25, 0xFF	; 255
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:258
      _write(ascan | 0x80) ;
    12f0:	fc 01       	movw	r30, r24
    12f2:	80 81       	ld	r24, Z
    12f4:	80 68       	ori	r24, 0x80	; 128
    12f6:	93 cf       	rjmp	.-218    	; 0x121e <main+0x36e>
delayMicrosecondsWithoutMillisInterruptAdjustment():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:3065
    12f8:	f7 01       	movw	r30, r14
    12fa:	31 97       	sbiw	r30, 0x01	; 1
    12fc:	f1 f7       	brne	.-4      	; 0x12fa <main+0x44a>
    12fe:	01 97       	sbiw	r24, 0x01	; 1
delay():
C:\Users\spam\AppData\Local\Arduino15\packages\diy_attiny\hardware\avr\2023.4.19-gcc7.3\cores\tiny/MillisMicrosDelay.c:2506
}
#endif

void delay(DelayTime_t ms)
{
  while(ms--){
    1300:	d9 f7       	brne	.-10     	; 0x12f8 <main+0x448>
loop():
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:268
  }
  
  if (digitalRead(xt_clk) == LOW) // power-on self test
  {
    delay(10) ;
    _write(0xAA) ;
    1302:	8a ea       	ldi	r24, 0xAA	; 170
    1304:	50 dc       	rcall	.-1888   	; 0xba6 <_write(unsigned char)>
    1306:	05 cf       	rjmp	.-502    	; 0x1112 <main+0x262>
C:\Devel\Git\pcxtkbd_tiny13a\XT_KEYBOARD/XT_KEYBOARD.ino:241
    
  }

  if( ( c & PS2_BREAK ) ) 
  {
    switch (c & 0xff)
    1308:	e3 31       	cpi	r30, 0x13	; 19
    130a:	f1 05       	cpc	r31, r1
    130c:	78 f7       	brcc	.-34     	; 0x12ec <main+0x43c>
    130e:	e6 57       	subi	r30, 0x76	; 118
    1310:	f6 4f       	sbci	r31, 0xF6	; 246
    1312:	09 94       	ijmp
    1314:	bb cf       	rjmp	.-138    	; 0x128c <main+0x3dc>
    1316:	ea cf       	rjmp	.-44     	; 0x12ec <main+0x43c>
    1318:	e9 cf       	rjmp	.-46     	; 0x12ec <main+0x43c>
    131a:	bc cf       	rjmp	.-136    	; 0x1294 <main+0x3e4>
    131c:	e7 cf       	rjmp	.-50     	; 0x12ec <main+0x43c>
    131e:	e6 cf       	rjmp	.-52     	; 0x12ec <main+0x43c>
    1320:	e5 cf       	rjmp	.-54     	; 0x12ec <main+0x43c>
    1322:	e4 cf       	rjmp	.-56     	; 0x12ec <main+0x43c>
    1324:	e3 cf       	rjmp	.-58     	; 0x12ec <main+0x43c>
    1326:	be cf       	rjmp	.-132    	; 0x12a4 <main+0x3f4>
    1328:	c1 cf       	rjmp	.-126    	; 0x12ac <main+0x3fc>
    132a:	d8 cf       	rjmp	.-80     	; 0x12dc <main+0x42c>
    132c:	c7 cf       	rjmp	.-114    	; 0x12bc <main+0x40c>
    132e:	ca cf       	rjmp	.-108    	; 0x12c4 <main+0x414>
    1330:	cd cf       	rjmp	.-102    	; 0x12cc <main+0x41c>
    1332:	d0 cf       	rjmp	.-96     	; 0x12d4 <main+0x424>
    1334:	bf cf       	rjmp	.-130    	; 0x12b4 <main+0x404>
    1336:	b2 cf       	rjmp	.-156    	; 0x129c <main+0x3ec>
    1338:	d5 cf       	rjmp	.-86     	; 0x12e4 <main+0x434>

0000133a <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    133a:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    133c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    133e:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    1340:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    1342:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    1344:	09 94       	ijmp

00001346 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    1346:	f8 94       	cli

00001348 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr25/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    1348:	ff cf       	rjmp	.-2      	; 0x1348 <__stop_program>
